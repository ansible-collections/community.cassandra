# test code for the cassandra_keyspace module
# (c) 2019,  Rhys Campbell <rhys.james.campbell@googlemail.com>

# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

# ===========================================================
- name: Include vars for os family
  include_vars:
    file: "{{ ansible_os_family }}.yml"

# This should go into a cassandra_driver dependency
- name: Ensure epel is available
  yum:
    name: epel-release
  when: ansible_os_family == "RedHat"

- name: Install cassandra-driver
  pip:
    name: cassandra-driver
  environment:
    CASS_DRIVER_NO_CYTHON: 1

- name: Create a keyspace 1
  community.cassandra.cassandra_keyspace:
    name: mykeyspace
    state: present

- name: Get output of DESC KEYSPACE mykeyspace 1
  ansible.builtin.shell: cqlsh --execute "DESC KEYSPACE mykeyspace"
  register: mykeyspace

- name: Assert mykeyspace exists 1
  assert:
    that:
      - "'\\nCREATE KEYSPACE mykeyspace WITH replication = {\\'class\\': \\'SimpleStrategy\\', \\'replication_factor\\': \\'1\\'}  AND durable_writes = true;' == mykeyspace.stdout"

- name: Run create keyspace again
  community.cassandra.cassandra_keyspace:
    name: mykeyspace
    state: present
  register: keyspace_already_exists

- name: Assert not changed
  assert:
    that:
      - "keyspace_already_exists.changed == False"

- name: Remove a keyspace 1
  community.cassandra.cassandra_keyspace:
    name: mykeyspace
    state: absent

- name: Get output of DESC KEYSPACES 1
  ansible.builtin.shell: cqlsh --execute "DESC KEYSPACES"
  register: mykeyspace

- name: Assert mykeyspace does not exists 1
  assert:
    that:
      - "'mykeyspace' not in mykeyspace.stdout"

- name: Create a keyspace 2
  community.cassandra.cassandra_keyspace:
    name: mykeyspace
    replication_factor: 3
    state: present

- name: Get output of DESC KEYSPACE mykeyspace 2
  ansible.builtin.shell: cqlsh --execute "DESC KEYSPACE mykeyspace"
  register: mykeyspace

- name: Assert mykeyspace exists 2
  assert:
    that:
      - "'\\nCREATE KEYSPACE mykeyspace WITH replication = {\\'class\\': \\'SimpleStrategy\\', \\'replication_factor\\': \\'3\\'}  AND durable_writes = true;' == mykeyspace.stdout"

- name: Remove a keyspace 2
  community.cassandra.cassandra_keyspace:
    name: mykeyspace
    state: absent
  register: drop_keyspace

- name: Get output of DESC KEYSPACES 2
  ansible.builtin.shell: cqlsh --execute "DESC KEYSPACES"
  register: mykeyspace

- name: Assert mykeyspace does not exists 2
  assert:
    that:
      - "'mykeyspace' not in mykeyspace.stdout"
      - "drop_keyspace.changed == True"

- name: Run drop keyspace again
  community.cassandra.cassandra_keyspace:
    name: mykeyspace
    state: absent
  register: drop_keyspace

- name: Assert not changed
  assert:
    that:
      - "drop_keyspace.changed == False"

- name: Create keyspace with several data centres
  community.cassandra.cassandra_keyspace:
    name: mykeyspace
    state: present
    data_centres:
      london: 3
      paris: 1
      new_york: 2
  register: multiple_dcs

- name: Get output of DESC KEYSPACE mykeyspace 2
  ansible.builtin.shell: cqlsh --execute "DESC KEYSPACE mykeyspace"
  register: mykeyspace

- name: Assert mykeyspace exists 2
  assert:
    that:
      - "'CREATE KEYSPACE mykeyspace WITH replication' in mykeyspace.stdout"
      - "'\\'new_york\\': \\'2\\'' in mykeyspace.stdout"
      - "'\\'london\\': \\'3\\'' in mykeyspace.stdout"
      - "'\\'paris\\': \\'1\\'' in mykeyspace.stdout"
      - "multiple_dcs.changed == True"

- name: Run multi-dc keyspace create again
  community.cassandra.cassandra_keyspace:
    name: mykeyspace
    state: present
    data_centres:
      london: 3
      paris: 1
      new_york: 2
  register: multiple_dcs

- name: Assert multi-dc keyspace not changed
  assert:
    that:
      - "multiple_dcs.changed == False"

- name: Drop keyspace with check_mode = True
  community.cassandra.cassandra_keyspace:
    name: mykeyspace
    state: absent
  check_mode: yes
  register: drop_check

- name: Get output of DESC KEYSPACES
  ansible.builtin.shell: cqlsh --execute "DESC KEYSPACES"
  register: mykeyspace

- name: Assert mykeyspace still exists
  assert:
    that:
      - "'mykeyspace' in mykeyspace.stdout"
      - "drop_check.changed == True"

- name: Drop multi-dc keyspace
  community.cassandra.cassandra_keyspace:
    name: mykeyspace
    state: absent
  register: drop_multidc

- name: Get output of DESC KEYSPACES
  ansible.builtin.shell: cqlsh --execute "DESC KEYSPACES"
  register: mykeyspace

- name: Assert mykeyspace has now been dropped
  assert:
    that:
      - "'mykeyspace' not in mykeyspace.stdout"
      - "drop_multidc.changed == True"

- name: Create keyspace in check mode
  community.cassandra.cassandra_keyspace:
    name: new_keyspace_check
    state: present
  check_mode: yes
  register: new_keyspace_check

- name: Get output of DESC KEYSPACES
  ansible.builtin.shell: cqlsh --execute "DESC KEYSPACES"
  register: mykeyspace

- name: Assert that new_keyspace_check has not been created
  assert:
    that:
      - "'new_keyspace_check' not in mykeyspace.stdout"
      - " new_keyspace_check.changed == True"

- name: Create another multi-dc keyspace
  community.cassandra.cassandra_keyspace:
    name: rhys
    state: present
    data_centres:
      london: 2
      paris: 1
      new_york: 1
  register: rhys

- name: Get output of DESC KEYSPACE rhys
  ansible.builtin.shell: cqlsh --execute "DESC KEYSPACE rhys"
  register: mykeyspace

- name: Assert that rhys keyspace has been created
  assert:
    that:
      - "rhys.changed == True"
      - "'\\'london\\': \\'2\\'' in mykeyspace.stdout"
      - "'\\'new_york\\': \\'1\\'' in mykeyspace.stdout"
      - "'\\'paris\\': \\'1\\'' in mykeyspace.stdout"
      - "'CREATE KEYSPACE rhys WITH replication = {\\'class\\': \\'NetworkTopologyStrategy\\'' in mykeyspace.stdout"

- name: Drop keyspace rhys
  community.cassandra.cassandra_keyspace:
    name: rhys
    state: absent
  register: drop_rhys

- name: Get output of DESC KEYSPACES
  ansible.builtin.shell: cqlsh --execute "DESC KEYSPACES"
  register: mykeyspace

- name: Assert rhys has now been dropped
  assert:
    that:
      - "'rhys' not in mykeyspace.stdout"
      - "drop_rhys.changed == True"

# SimpleStrategy alter tests
- name: Create a rhys2 keyspace
  community.cassandra.cassandra_keyspace:
    name: rhys2
    state: present
  register: rhys2

- name: Get output of DESC KEYSPACE rhys2
  ansible.builtin.shell: cqlsh --execute "DESC KEYSPACE rhys2"
  register: mykeyspace

- name: Assert rhys2 exists
  assert:
    that:
      - "'\\nCREATE KEYSPACE rhys2 WITH replication = {\\'class\\': \\'SimpleStrategy\\', \\'replication_factor\\': \\'1\\'}  AND durable_writes = true;' == mykeyspace.stdout"
      - "rhys2.changed == True"

- name: alter rhys2 replication_factor
  community.cassandra.cassandra_keyspace:
    name: rhys2
    state: present
    replication_factor: 3
  register: rhys2

- name: Get output of DESC KEYSPACE rhys2
  ansible.builtin.shell: cqlsh --execute "DESC KEYSPACE rhys2"
  register: mykeyspace

- name: Assert rhys2 replication_factor change
  assert:
    that:
      - "'\\nCREATE KEYSPACE rhys2 WITH replication = {\\'class\\': \\'SimpleStrategy\\', \\'replication_factor\\': \\'3\\'}  AND durable_writes = true;' == mykeyspace.stdout"
      - "rhys2.changed == True"

- name: alter rhys2 durable_writes
  community.cassandra.cassandra_keyspace:
    name: rhys2
    state: present
    replication_factor: 3
    durable_writes: false
  register: rhys2

- name: Get output of DESC KEYSPACE rhys2
  ansible.builtin.shell: cqlsh --execute "DESC KEYSPACE rhys2"
  register: mykeyspace

- name: Assert rhys2 durable_writes change
  assert:
    that:
      - "'\\nCREATE KEYSPACE rhys2 WITH replication = {\\'class\\': \\'SimpleStrategy\\', \\'replication_factor\\': \\'3\\'}  AND durable_writes = false;' == mykeyspace.stdout"
      - "rhys2.changed == True"

- name: alter rhys2 back to original config
  community.cassandra.cassandra_keyspace:
    name: rhys2
    state: present
    replication_factor: 1
    durable_writes: true
  register: rhys2

- name: Get output of DESC KEYSPACE rhys2
  ansible.builtin.shell: cqlsh --execute "DESC KEYSPACE rhys2"
  register: mykeyspace

- name: Assert rhys2 exists
  assert:
    that:
      - "'\\nCREATE KEYSPACE rhys2 WITH replication = {\\'class\\': \\'SimpleStrategy\\', \\'replication_factor\\': \\'1\\'}  AND durable_writes = true;' == mykeyspace.stdout"
      - "rhys2.changed == True"

- name: Drop keyspace rhys2
  community.cassandra.cassandra_keyspace:
    name: rhys2
    state: absent
  register: drop_rhys2

- name: Get output of DESC KEYSPACES
  ansible.builtin.shell: cqlsh --execute "DESC KEYSPACES"
  register: mykeyspace

- name: Assert rhys2 has now been dropped
  assert:
    that:
      - "'rhys2' not in mykeyspace.stdout"
      - "drop_rhys2.changed == True"

- name: Test cassandra_keyspace module regex
  block:
    - name: Create a testregex keyspace
      community.cassandra.cassandra_keyspace:
        name: testregex_keyspace
        state: present

    - name: Create table with brackets for regex testing
      # Colons had to be escaped to avoid mapping yaml values
      ansible.builtin.shell: cqlsh --execute "CREATE TABLE testregex_keyspace.tablewithbrackets (groupid uuid, containinggroupid uuid, PRIMARY KEY (groupid, containinggroupid)) WITH CLUSTERING ORDER BY (containinggroupid ASC) AND caching = {'keys'{{ ":" }} 'ALL', 'rows_per_partition'{{ ":" }} 'NONE'}"

    - name: Rerun cassandra_keyspace command
      community.cassandra.cassandra_keyspace:
        name: testregex_keyspace
        state: present
      register: nochange

    - assert:
        that:
          - "nochange.changed == False"

# These tests add and remove data centers. With C* 4.0 a least one node must be added to the cluster in this dc before it can be used
- name: Multi DC Tests - Temp Skip on Cassandra 4.0
  block:
    - name: Create keyspace with several data centres
      community.cassandra.cassandra_keyspace:
        name: multidc_keyspace
        state: present
        data_centres:
          london: 3
          zurich: 3
          tokyo: 1
          new_york: 2
      register: multiple_dcs

    - name: Get output of DESC KEYSPACE multidc_keyspace
      ansible.builtin.shell: cqlsh --execute "DESC KEYSPACE multidc_keyspace"
      register: mykeyspace

    - name: Assert multidc_keyspace exists
      assert:
        that:
          - "'CREATE KEYSPACE multidc_keyspace WITH replication = {\\'class\\': \\'NetworkTopologyStrategy\\'' in mykeyspace.stdout"
          - "'\\'london\\': \\'3\\'' in mykeyspace.stdout"
          - "'\\'zurich\\': \\'3\\'' in mykeyspace.stdout"
          - "'\\'tokyo\\': \\'1\\'' in mykeyspace.stdout"
          - "'\\'new_york\\': \\'2\\'' in mykeyspace.stdout"
          - "multiple_dcs.changed == True"

    - name: Add a dc to multidc_keyspace
      community.cassandra.cassandra_keyspace:
        name: multidc_keyspace
        state: present
        data_centres:
          london: 3
          zurich: 3
          tokyo: 1
          new_york: 2
          amsterdam: 3
      register: multiple_dcs

    - name: Get output of DESC KEYSPACE multidc_keyspace
      ansible.builtin.shell: cqlsh --execute "DESC KEYSPACE multidc_keyspace"
      register: mykeyspace

    - name: Assert multidc_keyspace has an amsterdam dc
      assert:
        that:
          - "'CREATE KEYSPACE multidc_keyspace WITH replication = {\\'class\\': \\'NetworkTopologyStrategy\\'' in mykeyspace.stdout"
          - "'\\'london\\': \\'3\\'' in mykeyspace.stdout"
          - "'\\'zurich\\': \\'3\\'' in mykeyspace.stdout"
          - "'\\'tokyo\\': \\'1\\'' in mykeyspace.stdout"
          - "'\\'new_york\\': \\'2\\'' in mykeyspace.stdout"
          - "'\\'amsterdam\\': \\'3\\'' in mykeyspace.stdout"
          - "multiple_dcs.changed == True"

    - name: Remove amsterdam from multidc_keyspace
      community.cassandra.cassandra_keyspace:
        name: multidc_keyspace
        state: present
        data_centres:
          london: 3
          zurich: 3
          tokyo: 1
          new_york: 2
      register: multiple_dcs

    - name: Get output of DESC KEYSPACE multidc_keyspace
      ansible.builtin.shell: cqlsh --execute "DESC KEYSPACE multidc_keyspace"
      register: mykeyspace

    - name: Assert amsterdam dc has been removed
      assert:
        that:
          - "'CREATE KEYSPACE multidc_keyspace WITH replication = {\\'class\\': \\'NetworkTopologyStrategy\\'' in mykeyspace.stdout"
          - "'\\'london\\': \\'3\\'' in mykeyspace.stdout"
          - "'\\'zurich\\': \\'3\\'' in mykeyspace.stdout"
          - "'\\'tokyo\\': \\'1\\'' in mykeyspace.stdout"
          - "'\\'new_york\\': \\'2\\'' in mykeyspace.stdout"
          - "'\\'amsterdam\\': \\'3\\'' not in mykeyspace.stdout"
          - "multiple_dcs.changed == True"

    - name: Remove london from multidc_keyspace
      community.cassandra.cassandra_keyspace:
        name: multidc_keyspace
        state: present
        data_centres:
          zurich: 3
          tokyo: 1
          new_york: 2
      register: multiple_dcs

    - name: Get output of DESC KEYSPACE multidc_keyspace
      ansible.builtin.shell: cqlsh --execute "DESC KEYSPACE multidc_keyspace"
      register: mykeyspace

    - name: Assert london dc has been removed
      assert:
        that:
          - "'CREATE KEYSPACE multidc_keyspace WITH replication = {\\'class\\': \\'NetworkTopologyStrategy\\'' in mykeyspace.stdout"
          - "'london' not in mykeyspace.stdout"
          - "'\\'zurich\\': \\'3\\'' in mykeyspace.stdout"
          - "'\\'tokyo\\': \\'1\\'' in mykeyspace.stdout"
          - "'\\'new_york\\': \\'2\\'' in mykeyspace.stdout"
          - "multiple_dcs.changed == True"

    - name: Change tokyo replication factor to 3
      community.cassandra.cassandra_keyspace:
        name: multidc_keyspace
        state: present
        data_centres:
          zurich: 3
          tokyo: 3
          new_york: 2
      register: multiple_dcs

    - name: Get output of DESC KEYSPACE multidc_keyspace
      ansible.builtin.shell: cqlsh --execute "DESC KEYSPACE multidc_keyspace"
      register: mykeyspace

    - name: Assert tokyo rf is now 3 in keyspace definition
      assert:
        that:
          - "'CREATE KEYSPACE multidc_keyspace WITH replication = {\\'class\\': \\'NetworkTopologyStrategy\\'' in mykeyspace.stdout"
          - "'\\'zurich\\': \\'3\\'' in mykeyspace.stdout"
          - "'\\'tokyo\\': \\'3\\'' in mykeyspace.stdout"
          - "'\\'new_york\\': \\'2\\'' in mykeyspace.stdout"
          - "multiple_dcs.changed == True"

    - name: Drop multidc_keyspace
      community.cassandra.cassandra_keyspace:
        name: multidc_keyspace
        state: absent
      register: multidc_keyspace

    - name: Get output of DESC KEYSPACES
      ansible.builtin.shell: cqlsh --execute "DESC KEYSPACES"
      register: mykeyspace

    - name: Assert that multidc_keyspace has been removed
      assert:
        that:
          - "multidc_keyspace.changed == True"
          - "'multidc_keyspace' not in mykeyspace.stdout"

    #- include_tasks: ../../setup_cassandra/tasks/cassandra_auth.yml
    #  when: cassandra_auth_tests == True

    # SimpleStrategy keyspace
    - name: Create a keyspace with auth
      community.cassandra.cassandra_keyspace:
        name: mykeyspace
        #login_user: "{{ cassandra_admin_user }}"
        #login_password: "{{ cassandra_admin_pwd }}"
        state: present
      register: keyspace_auth
      #when: cassandra_auth_tests == True

    - name: Get output of DESC KEYSPACE mykeyspace
      #ansible.builtin.shell: "cqlsh -u  {{ cassandra_admin_user }} -p {{ cassandra_admin_pwd }} --execute 'DESC KEYSPACE mykeyspace'"
      ansible.builtin.shell: "cqlsh --execute 'DESC KEYSPACE mykeyspace'"
      register: mykeyspace
      #when: cassandra_auth_tests == True

    - name: Assert mykeyspace exists
      assert:
        that:
          - "'\\nCREATE KEYSPACE mykeyspace WITH replication = {\\'class\\': \\'SimpleStrategy\\', \\'replication_factor\\': \\'1\\'}  AND durable_writes = true;' == mykeyspace.stdout"
          - "mykeyspace.changed == True"
      #when: cassandra_auth_tests == True

    # NetworkTopologyStrategy keyspace
    - name: Create keyspace with several data centres
      community.cassandra.cassandra_keyspace:
        name: multi_dc_keyspace
        state: present
        #login_user: "{{ cassandra_admin_user }}"
        #login_password: "{{ cassandra_admin_pwd }}"
        data_centres:
          marlow: 3
          zurich: 3
          london: 3
          new_york: 3
      register: multiple_dcs

    - name: Get output of DESC KEYSPACE multi_dc_keyspace
      #ansible.builtin.shell: cqlsh  -u  {{ cassandra_admin_user }} -p {{ cassandra_admin_pwd }} --execute "DESC KEYSPACE multi_dc_keyspace"
      ansible.builtin.shell: cqlsh  --execute "DESC KEYSPACE multi_dc_keyspace"
      register: mykeyspace

    - name: Assert multi_dc_keyspace exists
      assert:
        that:
          - "'CREATE KEYSPACE multi_dc_keyspace WITH replication = {\\'class\\': \\'NetworkTopologyStrategy\\'' in mykeyspace.stdout"
          - "'\\'marlow\\': \\'3\\'' in mykeyspace.stdout"
          - "'\\'zurich\\': \\'3\\'' in mykeyspace.stdout"
          - "'\\'london\\': \\'3\\'' in mykeyspace.stdout"
          - "'\\'new_york\\': \\'3\\'' in mykeyspace.stdout"
          - "multiple_dcs.changed == True"
