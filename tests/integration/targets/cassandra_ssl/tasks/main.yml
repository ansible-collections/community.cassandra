<<<<<<< HEAD
---
=======
>>>>>>> 3829b5b (Added cassandra_ssl integration tests via ccm)
# Test code for cassandra SSL functionality (roles and keyspaces)
# (c) 2023,  Alex Ierodiakonou <alexandros.ierodiakonou@sky.uk>

# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

# ===========================================================
- name: Include vars for os family
  include_vars:
    file: "{{ ansible_os_family }}.yml"

# This should go into a cassandra_driver dependency
- name: Ensure epel is available
  yum:
    name: epel-release
  when: ansible_os_family == "RedHat"

<<<<<<< HEAD
- name: Upgrade pip
  shell: pip3 install -U pip  

=======
>>>>>>> 3829b5b (Added cassandra_ssl integration tests via ccm)
- name: Install cassandra-driver
  pip:
    name: cassandra-driver
  environment:
<<<<<<< HEAD
    CASS_DRIVER_NO_CYTHON: 1    
=======
    CASS_DRIVER_NO_CYTHON: 1

- name: Install ccm via pip
  pip:
    name: ccm
    state: present

- set_fact:
    ccm_cmd: /usr/local/bin/ccm
<<<<<<< HEAD
>>>>>>> 3829b5b (Added cassandra_ssl integration tests via ccm)
=======
    cassandra_version: 3.11.14
>>>>>>> 259ec57 (Set cassandra_version fact for ccm)

- name: Ensure Cassandra service from setup_cassandra isn't running
  service:
    name: "{{ cassandra_service }}"
    enabled: "yes"
    state: "stopped"
<<<<<<< HEAD
  ignore_errors: yes
=======
  ignore_errors: yes    
>>>>>>> 3829b5b (Added cassandra_ssl integration tests via ccm)

- name: Ensure dirs exist for SSL certificates
  file:
    path: /home/ssl-test-cluster
    state: directory
    owner: cassandra
    group: cassandra
    mode: 0755

- name: Copy SSL certificates and truststore/keystore files to local directory
  copy:
    src: "{{ item }}"
    dest: "/home/ssl-test-cluster/{{ item }}"
    owner: cassandra
    group: cassandra
    mode: '0644'
<<<<<<< HEAD
  with_items:
    - ssl-test.cer.pem
    - ssl-test.key.pem
    - keystore.jks
    - truststore.jks
    - cassandra.crt

- name: Remove default test cluster from CCM to allow testing for SSL enabled cluster
  shell: "sudo -E -u cassandra bash -c \"{{ ccm_cmd }} clear test > /dev/null\""
  become_user: cassandra
  args:
    chdir: /home/cassandra
  environment:
    CCM_CONFIG_DIR: "/home/cassandra/config"
    CASSANDRA_HOME: "/home/cassandra"
    JAVA_TOOL_OPTIONS: "-Dcom.sun.jndi.rmiURLParsing=legacy"
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ant/bin
  ignore_errors: yes      

- name: Create SSL enabled Cassandra cluster via ccm tool
  # shell: "sudo -E -u cassandra bash -c \"{{ ccm_cmd }} create ssl-test-cluster -v {{ cassandra_version }} --ssl /home/ssl-test-cluster/ --require_client_auth > /dev/null\""
  shell: "sudo -E -u cassandra bash -c \"{{ ccm_cmd }} create ssl-test-cluster -v {{ cassandra_version }} --ssl /home/ssl-test-cluster/ > /dev/null\""
=======
  with_fileglob:
    - cassandra.crt
    - cassandra.pem
    - client_cert.pem
    - client_key.pem
    - keystore.jks
    - truststore.jks

- name: Install SSL enabled Cassandra via ccm tool
  ansible.builtin.shell: "sudo -E -u cassandra bash -c \"{{ ccm_cmd }} create ssl-test-cluster -v {{ cassandra_version }} --ssl /home/ssl-test-cluster/ > /dev/null\""
>>>>>>> 3829b5b (Added cassandra_ssl integration tests via ccm)
  become_user: cassandra
  args:
    chdir: /home/cassandra
  environment:
    CCM_CONFIG_DIR: "/home/cassandra/config"
    CASSANDRA_HOME: "/home/cassandra"
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ant/bin  

- name: Add nodes to the Cassandra Cluster
<<<<<<< HEAD
  shell: "sudo -E -u cassandra bash -c '{{ ccm_cmd }} add {{ item.node }} -i {{ item.ip }} -j {{ item.port }} -b --data-center={{ item.dc }} --remote-debug-port {{ item.debug_port }} {{ item.args }}'"
=======
  ansible.builtin.shell: "sudo -E -u cassandra bash -c '{{ ccm_cmd }} add {{ item.node }} -i {{ item.ip }} -j {{ item.port }} -b --data-center={{ item.dc }} --remote-debug-port {{ item.debug_port }} {{ item.args }}'"
>>>>>>> 3829b5b (Added cassandra_ssl integration tests via ccm)
  become_user: cassandra
  args:
    chdir: /home/cassandra
  environment:
    CCM_CONFIG_DIR: "/home/cassandra/config"
    CASSANDRA_HOME: "/home/cassandra"
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ant
  with_items: "{{ cassandra_nodes }}"

# - name: Update endpoint_snitch
#   lineinfile:
#     path: "/home/cassandra/config/test/{{ item.node }}/conf/cassandra.yaml"
#     regexp: "^endpoint_snitch"
#     line: "endpoint_snitch: GossipingPropertyFileSnitch"
#   with_items: "{{ cassandra_nodes }}"
#   no_log: yes

# - name: Update rack info
#   copy:
#     content: |
#       dc={{ item.dc }}
#       rack=rack1
#     dest: /home/cassandra/config/test/{{ item.node }}/conf/cassandra-rackdc.properties
#   with_items: "{{ cassandra_nodes }}"

# - set_fact:
#     cassandra_node_delay: 120
#   when: ansible_os_family == "RedHat"

- name: Start the ccm cluster
<<<<<<< HEAD
  shell: sudo -E -u cassandra bash -c "{{ ccm_cmd }} start ssl-test-cluster --root"
=======
  ansible.builtin.shell: sudo -E -u cassandra bash -c "{{ ccm_cmd }} start  --root"
>>>>>>> 3829b5b (Added cassandra_ssl integration tests via ccm)
  become_user: cassandra
  args:
    chdir: /home/cassandra
  environment:
    CCM_CONFIG_DIR: "/home/cassandra/config"
    CASSANDRA_HOME: "/home/cassandra"
<<<<<<< HEAD
    JAVA_TOOL_OPTIONS: "-Dcom.sun.jndi.rmiURLParsing=legacy"
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ant/bin
    CCM_CLUSTER_START_DEFAULT_TIMEOUT: 600
  ignore_errors: yes      

- name: Get cluster status
  shell: sudo -E -u cassandra bash -c "{{ ccm_cmd }} status"
=======
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ant/bin
    CCM_CLUSTER_START_DEFAULT_TIMEOUT: 600

- name: Get cluster status
  ansible.builtin.shell: sudo -E -u cassandra bash -c "{{ ccm_cmd }} status"
>>>>>>> 3829b5b (Added cassandra_ssl integration tests via ccm)
  become_user: cassandra
  args:
    chdir: /home/cassandra
  register: cluster_status
  environment:
    CCM_CONFIG_DIR: "/home/cassandra/config"
    CASSANDRA_HOME: "/home/cassandra"
<<<<<<< HEAD
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ant/bin
=======
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ant/bin   
>>>>>>> 3829b5b (Added cassandra_ssl integration tests via ccm)

- debug:
    msg: "{{ cluster_status.stdout }}"

- name: Wait for the cql port to become active
  wait_for:
    port: 9042
    host: "{{ item.ip }}"
    delay: 30
    timeout: 600
<<<<<<< HEAD
  with_items: "{{ cassandra_nodes }}"
=======
  with_items: "{{ cassandra_nodes }}"               
>>>>>>> 3829b5b (Added cassandra_ssl integration tests via ccm)

# Creating a keyspace with ssl=True and verify_mode=CERT_NONE on an SSL enabled cluster should succeed
- name: Check keyspace creation on an SSL cluster
  cassandra_keyspace:
<<<<<<< HEAD
    name: ccmsslkeyspace_cert_none
    state: present
    ssl: True
    verify_mode: 'CERT_NONE'

- name: Get output of DESC KEYSPACE ccmsslkeyspace_cert_none
  shell: export SSL_CERTFILE=/home/ssl-test-cluster/ssl-test.cer.pem; cqlsh --ssl --execute "DESC KEYSPACE ccmsslkeyspace_cert_none"
  register: ccmsslkeyspace_cert_none

- name: Assert ccmsslkeyspace_cert_none exists 1
  assert:
    that:
      - "'\\nCREATE KEYSPACE ccmsslkeyspace_cert_none WITH replication = {\\'class\\': \\'SimpleStrategy\\', \\'replication_factor\\': \\'1\\'}  AND durable_writes = true;' == ccmsslkeyspace_cert_none.stdout"  

# Creating a keyspace with ssl=True and verify_mode=CERT_OPTIONAL on an SSL enabled cluster should succeed
- name: Check keyspace creation on an SSL cluster
  cassandra_keyspace:
    name: ccmsslkeyspace_cert_optional
    state: present
    ssl: True
    verify_mode: 'CERT_OPTIONAL'
    ssl_verify_location: '/home/ssl-test-cluster/ssl-test.cer.pem' 
  
- name: Get output of DESC KEYSPACE ccmsslkeyspace_cert_optional
  shell: export SSL_CERTFILE=/home/ssl-test-cluster/ssl-test.cer.pem; cqlsh --ssl --execute "DESC KEYSPACE ccmsslkeyspace_cert_optional"
  register: ccmsslkeyspace_cert_optional

- name: Assert ccmsslkeyspace_cert_optional exists 2
  assert:
    that:
      - "'\\nCREATE KEYSPACE ccmsslkeyspace_cert_optional WITH replication = {\\'class\\': \\'SimpleStrategy\\', \\'replication_factor\\': \\'1\\'}  AND durable_writes = true;' == ccmsslkeyspace_cert_optional.stdout"

# Creating a keyspace with ssl=True and verify_mode=CERT_OPTIONAL on an SSL enabled cluster with wrong ssl_verify_location should fail the module
- name: Check keyspace creation on an SSL cluster
  cassandra_keyspace:
    name: ccmsslkeyspace_cert_optional_f
    state: present
    ssl: True
    verify_mode: 'CERT_OPTIONAL'
    ssl_verify_location: '/random/cert/location.cer.pem' 
  ignore_errors: yes  
  register: ccmsslkeyspace_cert_optional_f

- name: Debug
  ansible.builtin.debug:
    msg: "{{ ccmsslkeyspace_cert_optional_f }}"
  
- name: Assert ccmsslkeyspace_cert_optional_f fails
  assert:
    that:
      - "'ssl_verify_location certificate: File not found' in ccmsslkeyspace_cert_optional_f.msg"    

# Creating a keyspace with ssl=True and verify_mode=CERT_REQUIRED on an SSL enabled cluster with wrong ssl_verify_location should fail the module
- name: Check keyspace creation on an SSL cluster
  cassandra_keyspace:
    name: ccmsslkeyspace_cert_required_f
    state: present
    ssl: True
    verify_mode: 'CERT_REQUIRED'
    ssl_verify_location: '/random/cert/location.cer.pem' 
  ignore_errors: yes  
  register: ccmsslkeyspace_cert_required_f

- name: Debug
  ansible.builtin.debug:
    msg: "{{ ccmsslkeyspace_cert_required_f }}"
  
- name: Assert ccmsslkeyspace_cert_required_f fails
  assert:
    that:
      - "'ssl_verify_location certificate: File not found' in ccmsslkeyspace_cert_required_f.msg"          

# Creating a keyspace with ssl=True and verify_mode=CERT_REQUIRED on an SSL enabled cluster should succeed
- name: Check keyspace creation on an SSL cluster
  cassandra_keyspace:
    name: ccmsslkeyspace_cert_required
    state: present
    ssl: True
    verify_mode: 'CERT_REQUIRED'
    ssl_verify_location: '/home/ssl-test-cluster/ssl-test.cer.pem' 
  
- name: Get output of DESC KEYSPACE ccmsslkeyspace_cert_required
  shell: export SSL_CERTFILE=/home/ssl-test-cluster/ssl-test.cer.pem; cqlsh --ssl --execute "DESC KEYSPACE ccmsslkeyspace_cert_required"
  register: ccmsslkeyspace_cert_required

- name: Assert ccmsslkeyspace_cert_required exists 3
  assert:
    that:
      - "'\\nCREATE KEYSPACE ccmsslkeyspace_cert_required WITH replication = {\\'class\\': \\'SimpleStrategy\\', \\'replication_factor\\': \\'1\\'}  AND durable_writes = true;' == ccmsslkeyspace_cert_required.stdout"          

# - name: Sleep for 3600 seconds and continue with play
#   ansible.builtin.wait_for:
#     timeout: 3600
#   delegate_to: localhost 
=======
    name: ccmsslkeyspace
    state: present
    ssl: True
    verify_mode: 'CERT_NONE'
  register: ccm_ssl_keyspace_status
  ignore_errors: yes          




>>>>>>> 3829b5b (Added cassandra_ssl integration tests via ccm)
