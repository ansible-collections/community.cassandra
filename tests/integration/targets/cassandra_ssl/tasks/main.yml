---
# Test code for cassandra SSL functionality (roles and keyspaces)
# (c) 2023,  Alex Ierodiakonou <alexandros.ierodiakonou@sky.uk>

# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

# ===========================================================
- name: Include vars for os family
  include_vars:
    file: "{{ ansible_os_family }}.yml"

# This should go into a cassandra_driver dependency
- name: Ensure epel is available
  yum:
    name: epel-release
  when: ansible_os_family == "RedHat"

- name: Upgrade pip
  shell: pip3 install -U pip  

- name: Install cassandra-driver
  pip:
    name: cassandra-driver
  environment:
    CASS_DRIVER_NO_CYTHON: 1 

- name: Ensure Cassandra service from setup_cassandra isn't running
  service:
    name: "{{ cassandra_service }}"
    enabled: "yes"
    state: "stopped"
  ignore_errors: yes

- name: Ensure directories exist for SSL certificates
  file:
    path: /home/ssl-test-cluster
    state: directory
    owner: cassandra
    group: cassandra
    mode: 0755

- name: Copy SSL certificates and truststore/keystore files to local directory
  copy:
    src: "{{ item }}"
    dest: "/home/ssl-test-cluster/{{ item }}"
    owner: cassandra
    group: cassandra
    mode: '0644'
  with_items:
    - ssl-test.cer.pem
    - ssl-test.key.pem
    - keystore.jks
    - truststore.jks
    - cassandra.crt

- name: Remove default test cluster from CCM to allow testing for SSL enabled cluster
  shell: "sudo -E -u cassandra bash -c \"{{ ccm_cmd }} clear test > /dev/null\""
  become_user: cassandra
  args:
    chdir: /home/cassandra
  environment:
    CCM_CONFIG_DIR: "/home/cassandra/config"
    CASSANDRA_HOME: "/home/cassandra"
    JAVA_TOOL_OPTIONS: "-Dcom.sun.jndi.rmiURLParsing=legacy"
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ant/bin     

- name: Create SSL enabled Cassandra cluster via ccm tool
  # shell: "sudo -E -u cassandra bash -c \"{{ ccm_cmd }} create ssl-test-cluster -v {{ cassandra_version }} --ssl /home/ssl-test-cluster/ --require_client_auth > /dev/null\""
  shell: "sudo -E -u cassandra bash -c \"{{ ccm_cmd }} create ssl-test-cluster -v {{ cassandra_version }} --ssl /home/ssl-test-cluster/ > /dev/null\""
  become_user: cassandra
  args:
    chdir: /home/cassandra
  environment:
    CCM_CONFIG_DIR: "/home/cassandra/config"
    CASSANDRA_HOME: "/home/cassandra"
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ant/bin  

- name: Add nodes to the Cassandra Cluster
  shell: "sudo -E -u cassandra bash -c '{{ ccm_cmd }} add {{ item.node }} -i {{ item.ip }} -j {{ item.port }} -b --data-center={{ item.dc }} --remote-debug-port {{ item.debug_port }} {{ item.args }}'"
  become_user: cassandra
  args:
    chdir: /home/cassandra
  environment:
    CCM_CONFIG_DIR: "/home/cassandra/config"
    CASSANDRA_HOME: "/home/cassandra"
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ant
  with_items: "{{ cassandra_nodes }}"

- name: Update endpoint_snitch
  lineinfile:
    path: "/home/cassandra/config/test/{{ item.node }}/conf/cassandra.yaml"
    regexp: "^endpoint_snitch"
    line: "endpoint_snitch: GossipingPropertyFileSnitch"
  with_items: "{{ cassandra_nodes }}"
  no_log: yes

- name: Update rack info
  copy:
    content: |
      dc={{ item.dc }}
      rack=rack1
    dest: /home/cassandra/config/test/{{ item.node }}/conf/cassandra-rackdc.properties
  with_items: "{{ cassandra_nodes }}"

- set_fact:
    cassandra_node_delay: 120
  when: ansible_os_family == "RedHat"

- name: Start the ccm cluster
  shell: sudo -E -u cassandra bash -c "{{ ccm_cmd }} start ssl-test-cluster --root"
  become_user: cassandra
  args:
    chdir: /home/cassandra
  environment:
    CCM_CONFIG_DIR: "/home/cassandra/config"
    CASSANDRA_HOME: "/home/cassandra"
    JAVA_TOOL_OPTIONS: "-Dcom.sun.jndi.rmiURLParsing=legacy"
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ant/bin
    CCM_CLUSTER_START_DEFAULT_TIMEOUT: 600      

- name: Get cluster status
  shell: sudo -E -u cassandra bash -c "{{ ccm_cmd }} status"
  become_user: cassandra
  args:
    chdir: /home/cassandra
  register: cluster_status
  environment:
    CCM_CONFIG_DIR: "/home/cassandra/config"
    CASSANDRA_HOME: "/home/cassandra"
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ant/bin

- debug:
    msg: "{{ cluster_status.stdout }}"

- name: Wait for the cql port to become active
  wait_for:
    port: 9042
    host: "{{ item.ip }}"
    delay: 30
    timeout: 600
  with_items: "{{ cassandra_nodes }}"

- name: Creating a keyspace on an SSL-enabled cluster when ssl=True and ssl_cert_reqs=CERT_NONE should succeed
  cassandra_keyspace:
    name: ccmsslkeyspace_cert_none
    state: present
    ssl: True
    ssl_cert_reqs: 'CERT_NONE'

- name: Get output of DESC KEYSPACE ccmsslkeyspace_cert_none
  shell: export SSL_CERTFILE=/home/ssl-test-cluster/ssl-test.cer.pem; cqlsh --ssl --execute "DESC KEYSPACE ccmsslkeyspace_cert_none"
  register: ccmsslkeyspace_cert_none

- name: Assert ccmsslkeyspace_cert_none exists 1
  assert:
    that:
      - "'\\nCREATE KEYSPACE ccmsslkeyspace_cert_none WITH replication = {\\'class\\': \\'SimpleStrategy\\', \\'replication_factor\\': \\'1\\'}  AND durable_writes = true;' in ccmsslkeyspace_cert_none.stdout"  

- name: Creating a keyspace on an SSL-enabled cluster when ssl=True and ssl_cert_reqs=CERT_OPTIONAL should succeed
  cassandra_keyspace:
    name: ccmsslkeyspace_cert_optional
    state: present
    ssl: True
    ssl_cert_reqs: 'CERT_OPTIONAL'
    ssl_ca_certs: '/home/ssl-test-cluster/ssl-test.cer.pem' 
  
- name: Get output of DESC KEYSPACE ccmsslkeyspace_cert_optional
  shell: export SSL_CERTFILE=/home/ssl-test-cluster/ssl-test.cer.pem; cqlsh --ssl --execute "DESC KEYSPACE ccmsslkeyspace_cert_optional"
  register: ccmsslkeyspace_cert_optional

- name: Assert ccmsslkeyspace_cert_optional exists 2
  assert:
    that:
      - "'\\nCREATE KEYSPACE ccmsslkeyspace_cert_optional WITH replication = {\\'class\\': \\'SimpleStrategy\\', \\'replication_factor\\': \\'1\\'}  AND durable_writes = true;' in ccmsslkeyspace_cert_optional.stdout"

- name: Creating a keyspace with ssl=True and ssl_cert_reqs=CERT_OPTIONAL on an SSL enabled cluster with wrong ssl_ca_certs should fail
  cassandra_keyspace:
    name: ccmsslkeyspace_cert_optional_f
    state: present
    ssl: True
    ssl_cert_reqs: 'CERT_OPTIONAL'
    ssl_ca_certs: '/random/cert/location.cer.pem' 
  ignore_errors: yes  
  register: ccmsslkeyspace_cert_optional_f

- name: Assert ccmsslkeyspace_cert_optional_f fails
  assert:
    that:
      - "'ssl_ca_certs certificate: File not found' in ccmsslkeyspace_cert_optional_f.msg"    

- name: Creating a keyspace with ssl=True and ssl_cert_reqs=CERT_REQUIRED on an SSL enabled cluster with wrong ssl_ca_certs should fail
  cassandra_keyspace:
    name: ccmsslkeyspace_cert_required_f
    state: present
    ssl: True
    ssl_cert_reqs: 'CERT_REQUIRED'
    ssl_ca_certs: '/random/cert/location.cer.pem' 
  ignore_errors: yes  
  register: ccmsslkeyspace_cert_required_f

- name: Assert ccmsslkeyspace_cert_required_f fails
  assert:
    that:
      - "'ssl_ca_certs certificate: File not found' in ccmsslkeyspace_cert_required_f.msg" 

- name: Creating a keyspace with ssl=True and ssl_cert_reqs=CERT_REQUIRED on an SSL enabled cluster should succeed
  cassandra_keyspace:
    name: ccmsslkeyspace_cert_required
    state: present
    ssl: True
    ssl_cert_reqs: 'CERT_REQUIRED'
    ssl_ca_certs: '/home/ssl-test-cluster/ssl-test.cer.pem' 
  
- name: Get output of DESC KEYSPACE ccmsslkeyspace_cert_required
  shell: export SSL_CERTFILE=/home/ssl-test-cluster/ssl-test.cer.pem; cqlsh --ssl --execute "DESC KEYSPACE ccmsslkeyspace_cert_required"
  register: ccmsslkeyspace_cert_required

- name: Assert ccmsslkeyspace_cert_required exists 3
  assert:
    that:
      - "'\\nCREATE KEYSPACE ccmsslkeyspace_cert_required WITH replication = {\\'class\\': \\'SimpleStrategy\\', \\'replication_factor\\': \\'1\\'}  AND durable_writes = true;' in ccmsslkeyspace_cert_required.stdout"          

- name: Creating a keyspace for table tests with ssl:True and ssl_cert_reqs:CERT_NONE should succeed
  cassandra_keyspace:
    ssl: True
    ssl_cert_reqs: 'CERT_NONE'
    name: myappssl
    state: present

- name: Test table creation - Creating a table with ssl:True and ssl_cert_reqs:CERT_REQUIRED and wrong ssl_ca_certs should fail
  community.cassandra.cassandra_table:
    name: users
    ssl: True
    ssl_cert_reqs: 'CERT_REQUIRED'
    keyspace: myappssl
    ssl_ca_certs: '/random/cert/location.cer.pem'
    state: present
    columns:
      - id: uuid
      - username: text
      - encrypted_password: blob
      - first_name: text
      - last_name: text
      - dob: date
    primary_key:
      - username
  register: create_table_required
  ignore_errors: yes

- name: Assert create_table_required fails
  assert:
    that:
      - "'ssl_ca_certs certificate: File not found' in create_table_required.msg"  

- name: Test table creation - Creating a table with ssl:True and ssl_cert_reqs:CERT_OPTIONAL and wrong ssl_ca_certs should fail
  community.cassandra.cassandra_table:
    name: users
    ssl: True
    ssl_cert_reqs: 'CERT_OPTIONAL'
    keyspace: myappssl
    ssl_ca_certs: '/random/cert/location.cer.pem'
    state: present
    columns:
      - id: uuid
      - username: text
      - encrypted_password: blob
      - first_name: text
      - last_name: text
      - dob: date
    primary_key:
      - username
  register: create_table_optional
  ignore_errors: yes

- name: Assert create_table_optional fails
  assert:
    that:
      - "'ssl_ca_certs certificate: File not found' in create_table_optional.msg"

- name: Test table creation - Creating a table with ssl:True and ssl_cert_reqs:CERT_NONE should succeed
  community.cassandra.cassandra_table:
    name: users
    ssl: True
    ssl_cert_reqs: 'CERT_NONE'
    keyspace: myappssl
    state: present
    columns:
      - id: uuid
      - username: text
      - encrypted_password: blob
      - first_name: text
      - last_name: text
      - dob: date
    primary_key:
      - username
  register: create_users

- assert:
    that:
      - "create_users.changed == True"
      - "create_users.cql == 'CREATE TABLE myappssl.users ( id uuid, username text, encrypted_password blob, first_name text, last_name text, dob date, PRIMARY KEY (username))'"

- name: Get output of DESC KEYSPACE myappssl
  shell: " export SSL_CERTFILE=/home/ssl-test-cluster/ssl-test.cer.pem; cqlsh --ssl --execute 'DESC KEYSPACE myappssl'"
  register: myappssl

- assert:
    that:
      - "'CREATE TABLE myappssl.users' in myappssl.stdout"

- name: Creating a keyspace for table tests with ssl:True and ssl_cert_reqs:CERT_REQUIRED should succeed
  cassandra_keyspace:
    ssl: True
    ssl_cert_reqs: 'CERT_REQUIRED'
    ssl_ca_certs: '/home/ssl-test-cluster/ssl-test.cer.pem' 
    name: myappssl_cert_required
    state: present

- name: Test table creation
  community.cassandra.cassandra_table:
    name: users
    ssl: True
    ssl_ca_certs: '/home/ssl-test-cluster/ssl-test.cer.pem'
    ssl_cert_reqs: 'CERT_REQUIRED'
    keyspace: myappssl_cert_required
    state: present
    columns:
      - id: uuid
      - username: text
      - encrypted_password: blob
      - first_name: text
      - last_name: text
      - dob: date
    primary_key:
      - username
  register: create_users_cert_required

- assert:
    that:
      - "create_users_cert_required.changed == True"
      - "create_users_cert_required.cql == 'CREATE TABLE myappssl_cert_required.users ( id uuid, username text, encrypted_password blob, first_name text, last_name text, dob date, PRIMARY KEY (username))'"

- name: Get output of DESC KEYSPACE myappssl_cert_required
  shell: " export SSL_CERTFILE=/home/ssl-test-cluster/ssl-test.cer.pem; cqlsh --ssl --execute 'DESC KEYSPACE myappssl_cert_required'"
  register: myappssl_cert_required

- assert:
    that:
      - "'CREATE TABLE myappssl_cert_required.users' in myappssl_cert_required.stdout"

- name: Creating a keyspace for table tests with ssl:True and ssl_cert_reqs:CERT_OPTIONAL should succeed
  cassandra_keyspace:
    ssl: True
    ssl_cert_reqs: 'CERT_OPTIONAL'
    ssl_ca_certs: '/home/ssl-test-cluster/ssl-test.cer.pem' 
    name: myappssl_cert_optional
    state: present

- name: Test table creation
  community.cassandra.cassandra_table:
    name: users
    ssl: True
    ssl_ca_certs: '/home/ssl-test-cluster/ssl-test.cer.pem'
    ssl_cert_reqs: 'CERT_OPTIONAL'
    keyspace: myappssl_cert_optional
    state: present
    columns:
      - id: uuid
      - username: text
      - encrypted_password: blob
      - first_name: text
      - last_name: text
      - dob: date
    primary_key:
      - username
  register: create_users_cert_required

- assert:
    that:
      - "create_users_cert_required.changed == True"
      - "create_users_cert_required.cql == 'CREATE TABLE myappssl_cert_optional.users ( id uuid, username text, encrypted_password blob, first_name text, last_name text, dob date, PRIMARY KEY (username))'"

- name: Get output of DESC KEYSPACE myappssl_cert_optional
  shell: " export SSL_CERTFILE=/home/ssl-test-cluster/ssl-test.cer.pem; cqlsh --ssl --execute 'DESC KEYSPACE myappssl_cert_optional'"
  register: myappssl_cert_optional

- assert:
    that:
      - "'CREATE TABLE myappssl_cert_optional.users' in myappssl_cert_optional.stdout"

- name: Remove previous ssl-test cluster from CCM to allow testing for authenticated SSL enabled cluster
  shell: "sudo -E -u cassandra bash -c \"{{ ccm_cmd }} clear ssl-test-cluster > /dev/null\""
  become_user: cassandra
  args:
    chdir: /home/cassandra
  environment:
    CCM_CONFIG_DIR: "/home/cassandra/config"
    CASSANDRA_HOME: "/home/cassandra"
    JAVA_TOOL_OPTIONS: "-Dcom.sun.jndi.rmiURLParsing=legacy"
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ant/bin      

- name: Create Authenticated and SSL enabled Cassandra cluster via ccm tool
  shell: "sudo -E -u cassandra bash -c \"{{ ccm_cmd }} create ssl-test-cluster-auth -v {{ cassandra_version }} --ssl /home/ssl-test-cluster/ --pwd-auth > /dev/null\""
  become_user: cassandra
  args:
    chdir: /home/cassandra
  environment:
    CCM_CONFIG_DIR: "/home/cassandra/config"
    CASSANDRA_HOME: "/home/cassandra"
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ant/bin  

- name: Add nodes to the Cassandra Cluster
  shell: "sudo -E -u cassandra bash -c '{{ ccm_cmd }} add {{ item.node }} -i {{ item.ip }} -j {{ item.port }} -b --data-center={{ item.dc }} --remote-debug-port {{ item.debug_port }} {{ item.args }}'"
  become_user: cassandra
  args:
    chdir: /home/cassandra
  environment:
    CCM_CONFIG_DIR: "/home/cassandra/config"
    CASSANDRA_HOME: "/home/cassandra"
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ant
  with_items: "{{ cassandra_nodes }}"

- name: Update endpoint_snitch
  lineinfile:
    path: "/home/cassandra/config/test/{{ item.node }}/conf/cassandra.yaml"
    regexp: "^endpoint_snitch"
    line: "endpoint_snitch: GossipingPropertyFileSnitch"
  with_items: "{{ cassandra_nodes }}"
  no_log: yes

- name: Update rack info
  copy:
    content: |
      dc={{ item.dc }}
      rack=rack1
    dest: /home/cassandra/config/test/{{ item.node }}/conf/cassandra-rackdc.properties
  with_items: "{{ cassandra_nodes }}"

- set_fact:
    cassandra_node_delay: 120
  when: ansible_os_family == "RedHat"

- name: Start the ccm cluster
  shell: sudo -E -u cassandra bash -c "{{ ccm_cmd }} start ssl-test-cluster-auth --root"
  become_user: cassandra
  args:
    chdir: /home/cassandra
  environment:
    CCM_CONFIG_DIR: "/home/cassandra/config"
    CASSANDRA_HOME: "/home/cassandra"
    JAVA_TOOL_OPTIONS: "-Dcom.sun.jndi.rmiURLParsing=legacy"
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ant/bin
    CCM_CLUSTER_START_DEFAULT_TIMEOUT: 600    

- name: Get cluster status
  shell: sudo -E -u cassandra bash -c "{{ ccm_cmd }} status"
  become_user: cassandra
  args:
    chdir: /home/cassandra
  register: cluster_status
  environment:
    CCM_CONFIG_DIR: "/home/cassandra/config"
    CASSANDRA_HOME: "/home/cassandra"
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/ant/bin

- debug:
    msg: "{{ cluster_status.stdout }}"

- name: Wait for the cql port to become active
  wait_for:
    port: 9042
    host: "{{ item.ip }}"
    delay: 30
    timeout: 600
  with_items: "{{ cassandra_nodes }}"

- name: Create a role with ssl:true and CERT_VERIFY:NONE (IMPLICIT)
  community.cassandra.cassandra_role:
    name: app_user
    ssl: True
    password: 'secretZHB78'
    state: present
    login: yes
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: create_role

- assert:
    that:
      - 'create_role.changed == True'

- name: Create a role (check mode)
  community.cassandra.cassandra_role:
    name: app_user
    ssl: True
    password: 'secretZHB78'
    state: present
    login: yes
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  check_mode: yes

- name: Get output of list roles
  shell: export SSL_CERTFILE=/home/ssl-test-cluster/ssl-test.cer.pem; cqlsh --ssl --username "{{ cassandra_admin_user }}" --password "{{ cassandra_admin_pwd }}" --execute "LIST ROLES"
  register: myrole

- name: Assert app_user exists in output
  assert:
    that:
      - "'app_user' in myrole.stdout"  

- name: Create a role with ssl:true and CERT_VERIFY:REQUIRED 
  community.cassandra.cassandra_role:
    name: app_user_c_r
    ssl: True
    ssl_ca_certs: '/home/ssl-test-cluster/ssl-test.cer.pem'
    ssl_cert_reqs: 'CERT_REQUIRED'
    password: 'secretZHB78'
    state: present
    login: yes
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: create_role_required

- assert:
    that:
      - 'create_role_required.changed == True'

- name: Create a role (check mode)
  community.cassandra.cassandra_role:
    name: app_user_c_r
    ssl: True
    ssl_ca_certs: '/home/ssl-test-cluster/ssl-test.cer.pem'
    ssl_cert_reqs: 'CERT_REQUIRED'
    password: 'secretZHB78'
    state: present
    login: yes
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  check_mode: yes

- name: Get output of list roles
  shell: export SSL_CERTFILE=/home/ssl-test-cluster/ssl-test.cer.pem; cqlsh --ssl --username "{{ cassandra_admin_user }}" --password "{{ cassandra_admin_pwd }}" --execute "LIST ROLES"
  register: myrole_required

- name: Assert app_user_c_r exists in output
  assert:
    that:
      - "'app_user_c_r' in myrole_required.stdout"  

- name: Create a role with ssl:true and CERT_VERIFY:OPTIONAL 
  community.cassandra.cassandra_role:
    name: app_user_c_o
    ssl: True
    ssl_ca_certs: '/home/ssl-test-cluster/ssl-test.cer.pem'
    ssl_cert_reqs: 'CERT_OPTIONAL'
    password: 'secretZHB78'
    state: present
    login: yes
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: create_role_optional

- assert:
    that:
      - 'create_role_optional.changed == True'

- name: Create a role (check mode)
  community.cassandra.cassandra_role:
    name: app_user_c_o
    ssl: True
    ssl_ca_certs: '/home/ssl-test-cluster/ssl-test.cer.pem'
    ssl_cert_reqs: 'CERT_REQUIRED'
    password: 'secretZHB78'
    state: present
    login: yes
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  check_mode: yes

- name: Get output of list roles
  shell: export SSL_CERTFILE=/home/ssl-test-cluster/ssl-test.cer.pem; cqlsh --ssl --username "{{ cassandra_admin_user }}" --password "{{ cassandra_admin_pwd }}" --execute "LIST ROLES"
  register: myrole_optional

- name: Assert app_user_c_o exists in output
  assert:
    that:
      - "'app_user_c_o' in myrole_optional.stdout"  

- name: Create a role with ssl:true and CERT_VERIFY:REQUIRED and invalid ssl_ca_certs should FAIL 
  community.cassandra.cassandra_role:
    name: app_user_c_r
    ssl: True
    ssl_ca_certs: '/random/ssl/ssl-test.cer.pem'
    ssl_cert_reqs: 'CERT_REQUIRED'
    password: 'secretZHB78'
    state: present
    login: yes
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: create_role_required_fail
  ignore_errors: yes

- assert:
    that:
      - "'ssl_ca_certs certificate: File not found' in create_role_required_fail.msg"

- name: Create a role with ssl:true and CERT_VERIFY:OPTIONAL and invalid ssl_ca_certs should FAIL 
  community.cassandra.cassandra_role:
    name: app_user_c_o
    ssl: True
    ssl_ca_certs: '/random/ssl/ssl-test.cer.pem'
    ssl_cert_reqs: 'CERT_OPTIONAL'
    password: 'secretZHB78'
    state: present
    login: yes
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: create_role_optional_fail
  ignore_errors: yes

- assert:
    that:
      - "'ssl_ca_certs certificate: File not found' in create_role_optional_fail.msg"

# - name: Sleep for 3600 seconds and continue with play
#   ansible.builtin.wait_for:
#     timeout: 3600
#   delegate_to: localhost   