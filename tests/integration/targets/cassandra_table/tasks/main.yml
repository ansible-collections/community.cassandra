# test code for the cassandra_keyspace module
# (c) 2019,  Rhys Campbell <rhys.james.campbell@googlemail.com>

# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

# ===========================================================

- name: Include vars for os family
  include_vars:
    file: "{{ ansible_os_family }}.yml"

# This should go into a cassandra_driver dependency
- name: Ensure epel is available
  yum:
    name: epel-release
  when: ansible_os_family == "RedHat"

- name: Install cassandra-driver
  pip:
    name: cassandra-driver
  environment:
    CASS_DRIVER_NO_CYTHON: 1

- name: Create a keyspace for tests
  cassandra_keyspace:
    name: myapp
    state: present

- name: Test table creation
  community.cassandra.cassandra_table:
    name: users
    keyspace: myapp
    state: present
    columns:
      - id: uuid
      - username: text
      - encrypted_password: blob
      - first_name: text
      - last_name: text
      - dob: date
    primary_key:
      - username
  register: create_users

- assert:
    that:
      - "create_users.changed == True"
      - "create_users.cql == 'CREATE TABLE myapp.users ( id uuid, username text, encrypted_password blob, first_name text, last_name text, dob date, PRIMARY KEY (username))'"

- name: Get output of DESC KEYSPACE myapp
  ansible.builtin.shell: "cqlsh -u  {{ cassandra_admin_user }} -p {{ cassandra_admin_pwd }} --execute 'DESC KEYSPACE myapp'"
  register: myapp

- assert:
    that:
      - "'CREATE TABLE myapp.users' in myapp.stdout"

- name: Run create again
  community.cassandra.cassandra_table:
    name: users
    keyspace: myapp
    state: present
    columns:
      - id: uuid
      - username: text
      - encrypted_password: blob
      - first_name: text
      - last_name: text
      - dob: date
    primary_key:
      - username
  register: create_users

- assert:
    that:
      - "create_users.changed == False"

- name: Drop users table
  community.cassandra.cassandra_table:
    name: users
    keyspace: myapp
    state: absent
  register: drop_users

- name: Table should be dropped
  assert:
    that:
      - "drop_users.changed == True"
      - "drop_users.cql == 'DROP TABLE myapp.users'"

- name: Get output of DESC KEYSPACE myapp
  ansible.builtin.shell: "cqlsh -u  {{ cassandra_admin_user }} -p {{ cassandra_admin_pwd }} --execute 'DESC KEYSPACE myapp'"
  register: myapp

- name: Ensure myapp.users table does not exist
  assert:
    that:
      - "'CREATE TABLE myapp.users' not in myapp.stdout"

- name: Drop users table
  community.cassandra.cassandra_table:
    name: users
    keyspace: myapp
    state: absent
  register: drop_users

- name: Check no change has occured
  assert:
    that:
      - "drop_users.changed == False"

- include_tasks: ../../setup_cassandra/tasks/cassandra_auth.yml
  when: cassandra_auth_tests == True

- name: Run create again
  community.cassandra.cassandra_table:
    name: users
    keyspace: myapp
    state: present
    columns:
      - id: uuid
      - username: text
      - encrypted_password: blob
      - first_name: text
      - last_name: text
      - dob: date
    primary_key:
      - username
    table_options:
      bloom_filter_fp_chance: '0.02'
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: create_users

- name: Table should be created
  assert:
    that:
      - "create_users.changed == True"

- name: Get output of DESC KEYSPACE myapp
  ansible.builtin.shell: "cqlsh -u  {{ cassandra_admin_user }} -p {{ cassandra_admin_pwd }} --execute 'DESC KEYSPACE myapp'"
  register: myapp

- name: Check myapp.users table
  assert:
    that:
      - "'CREATE TABLE myapp.users' in myapp.stdout"
      - "'0.02' in myapp.stdout"

- name: Create a keyspace for killrvideo tests
  cassandra_keyspace:
    name: killrvideo
    state: present
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"

- name: Create user_credentials table
  community.cassandra.cassandra_table:
    name: user_credentials
    state: present
    keyspace: killrvideo
    columns:
      - email: text
      - password: text
      - userid: uuid
    primary_key:
      - email
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: user_credentials

- assert:
    that:
      - "user_credentials.changed == True"
      - "user_credentials.cql == 'CREATE TABLE killrvideo.user_credentials ( email text, password text, userid uuid, PRIMARY KEY (email))'"

- name: Create user table
  community.cassandra.cassandra_table:
    name: users
    state: present
    keyspace: killrvideo
    columns:
      - userid: uuid
      - firstname: varchar
      - lastname: varchar
      - email: text
      - created_date: timestamp
    primary_key:
      - userid
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: users

- assert:
    that:
      - "users.changed == True"
      - "users.cql == 'CREATE TABLE killrvideo.users ( userid uuid, firstname varchar, lastname varchar, email text, created_date timestamp, PRIMARY KEY (userid))'"

- name: Create video_metadata type
  community.cassandra.cassandra_table:
    name: video_metadata
    state: present
    keyspace: killrvideo
    columns:
      - height: int
      - width: int
      - video_bit_rate: "set<text>"
      - encoding: text
    is_type: True
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: video_metadata

- assert:
    that:
      - "video_metadata.changed == True"
      - "video_metadata.cql == 'CREATE TYPE killrvideo.video_metadata ( height int, width int, video_bit_rate set<text>, encoding text, )'"

- pause:
    seconds: 5

- name: Create videos table
  community.cassandra.cassandra_table:
    name: videos
    state: present
    keyspace: killrvideo
    columns:
      - videoid: uuid
      - userid: uuid
      - name: varchar
      - description: varchar
      - location: text
      - location_type: int
      - preview_thumbnails: "map<text,text>"
      - tags: "set<varchar>"
      - metadata: "set<frozen<video_metadata>>"
      - added_date: "timestamp"
    primary_key:
      - videoid
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: videos

- assert:
    that:
      - "videos.changed == True"
      - "videos.cql == 'CREATE TABLE killrvideo.videos ( videoid uuid, userid uuid, name varchar, description varchar, location text, location_type int, preview_thumbnails map<text,text>, tags set<varchar>, metadata set<frozen<video_metadata>>, added_date timestamp, PRIMARY KEY (videoid))'"

- name: Create user_videos table
  community.cassandra.cassandra_table:
    name: user_videos
    state: present
    keyspace: killrvideo
    columns:
      - userid: uuid
      - added_date: timestamp
      - videoid: uuid
      - name: text
      - preview_image_location: text
    primary_key:
      - userid
      - added_date
      - videoid
    clustering:
      - added_date: "DESC"
      - videoid: "ASC"
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: user_videos

- assert:
    that:
      - "user_videos.changed == True"
      - "user_videos.cql == 'CREATE TABLE killrvideo.user_videos ( userid uuid, added_date timestamp, videoid uuid, name text, preview_image_location text, PRIMARY KEY (userid, added_date, videoid)) WITH CLUSTERING ORDER BY (added_date DESC, videoid ASC)'"

- name: Create latest_videos table
  community.cassandra.cassandra_table:
    name: latest_videos
    state: present
    keyspace: killrvideo
    columns:
      - yyyymmdd: text
      - added_date: timestamp
      - videoid: uuid
      - name: text
      - preview_image_location: text
    primary_key:
      - yyyymmdd
      - added_date
      - videoid
    clustering:
      - added_date: "DESC"
      - videoid: "ASC"
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: latest_videos

- assert:
    that:
      - "latest_videos.changed == True"
      - "latest_videos.cql == 'CREATE TABLE killrvideo.latest_videos ( yyyymmdd text, added_date timestamp, videoid uuid, name text, preview_image_location text, PRIMARY KEY (yyyymmdd, added_date, videoid)) WITH CLUSTERING ORDER BY (added_date DESC, videoid ASC)'"

- name: Create video_rating table
  community.cassandra.cassandra_table:
    name: video_rating
    state: present
    keyspace: killrvideo
    columns:
      - videoid: uuid
      - rating_counter: counter
      - rating_total: counter
    primary_key:
      - videoid
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: video_rating

- assert:
    that:
      - "video_rating.changed == True"
      - "video_rating.cql == 'CREATE TABLE killrvideo.video_rating ( videoid uuid, rating_counter counter, rating_total counter, PRIMARY KEY (videoid))'"

- name: Create video_ratings_by_user table
  community.cassandra.cassandra_table:
    name: video_ratings_by_user
    state: present
    keyspace: killrvideo
    columns:
      - videoid: uuid
      - userid: uuid
      - rating: int
    primary_key:
      - videoid
      - userid
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: video_ratings_by_user

- assert:
    that:
      - "video_ratings_by_user.changed == True"
      - "video_ratings_by_user.cql == 'CREATE TABLE killrvideo.video_ratings_by_user ( videoid uuid, userid uuid, rating int, PRIMARY KEY (videoid, userid))'"

- name: Create table videos_by_tag
  community.cassandra.cassandra_table:
    name: videos_by_tag
    state: present
    keyspace: killrvideo
    columns:
      - tag: text
      - videoid: uuid
      - added_date: timestamp
      - name: text
      - preview_image_location: text
      - tagged_date: timestamp
    primary_key:
      - tag
      - videoid
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: videos_by_tag

- assert:
    that:
      - "videos_by_tag.changed == True"
      - "videos_by_tag.cql == 'CREATE TABLE killrvideo.videos_by_tag ( tag text, videoid uuid, added_date timestamp, name text, preview_image_location text, tagged_date timestamp, PRIMARY KEY (tag, videoid))'"

- name: Create table tags_by_letter
  community.cassandra.cassandra_table:
    name: tags_by_letter
    state: present
    keyspace: killrvideo
    columns:
      - first_letter: text
      - tag: text
    primary_key:
      - first_letter
      - tag
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: tags_by_letter

- assert:
    that:
      - "tags_by_letter.changed == True"
      - "tags_by_letter.cql == 'CREATE TABLE killrvideo.tags_by_letter ( first_letter text, tag text, PRIMARY KEY (first_letter, tag))'"

- name: Create table comments_by_video
  community.cassandra.cassandra_table:
    name: comments_by_video
    state: present
    keyspace: killrvideo
    columns:
      - videoid: uuid
      - commentid: timeuuid
      - userid: uuid
      - comment: text
    primary_key:
      - videoid
      - commentid
    clustering:
      - commentid: "DESC"
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: comments_by_video

- assert:
    that:
      - "comments_by_video.changed == True"
      - "comments_by_video.cql == 'CREATE TABLE killrvideo.comments_by_video ( videoid uuid, commentid timeuuid, userid uuid, comment text, PRIMARY KEY (videoid, commentid)) WITH CLUSTERING ORDER BY (commentid DESC)'"

- name: Create table comments_by_user
  community.cassandra.cassandra_table:
    name: comments_by_user
    state: present
    keyspace: killrvideo
    columns:
      - userid: uuid
      - commentid: timeuuid
      - videoid: uuid
      - comment: text
    primary_key:
      - userid
      - commentid
    clustering:
      - commentid: "DESC"
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: comments_by_user

- assert:
    that:
      - "comments_by_user.changed == True"
      - "comments_by_user.cql == 'CREATE TABLE killrvideo.comments_by_user ( userid uuid, commentid timeuuid, videoid uuid, comment text, PRIMARY KEY (userid, commentid)) WITH CLUSTERING ORDER BY (commentid DESC)'"

- name: Create table video_event
  community.cassandra.cassandra_table:
    name: video_event
    state: present
    keyspace: killrvideo
    columns:
      - videoid: uuid
      - userid: uuid
      - preview_image_location: "text static"
      - event: varchar
      - event_timestamp: timeuuid
      - video_timestamp: bigint
    primary_key:
      - videoid
      - userid
      - event_timestamp
      - event
    partition_key:
      - videoid
      - userid
    clustering:
      - event_timestamp: "DESC"
      - event: "ASC"
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: video_event

- assert:
    that:
      - "video_event.changed == True"
      - "video_event.cql == 'CREATE TABLE killrvideo.video_event ( videoid uuid, userid uuid, preview_image_location text static, event varchar, event_timestamp timeuuid, video_timestamp bigint, PRIMARY KEY ((videoid, userid), event_timestamp, event)) WITH CLUSTERING ORDER BY (event_timestamp DESC, event ASC)'"

- name: Create table uploaded_videos
  community.cassandra.cassandra_table:
    name: uploaded_videos
    state: present
    keyspace: killrvideo
    columns:
      - videoid: uuid
      - userid: uuid
      - name: text
      - description: text
      - tags: "set<text>"
      - added_date: timestamp,
      - jobid: text
    primary_key:
      - videoid
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: uploaded_videos

- assert:
    that:
      - "uploaded_videos.changed == True"
      - "uploaded_videos.cql == 'CREATE TABLE killrvideo.uploaded_videos ( videoid uuid, userid uuid, name text, description text, tags set<text>, added_date timestamp,, jobid text, PRIMARY KEY (videoid))'"

- name: Create table uploaded_videos_by_jobid
  community.cassandra.cassandra_table:
    name: uploaded_videos_by_jobid
    state: present
    keyspace: killrvideo
    columns:
      - jobid: text
      - videoid: uuid
      - userid: uuid
      - name: text
      - description: text
      - tags: "set<text>"
      - added_date: timestamp
    primary_key:
      - jobid
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: uploaded_videos_by_jobid

- assert:
    that:
      - "uploaded_videos_by_jobid.changed == True"
      - "uploaded_videos_by_jobid.cql == 'CREATE TABLE killrvideo.uploaded_videos_by_jobid ( jobid text, videoid uuid, userid uuid, name text, description text, tags set<text>, added_date timestamp, PRIMARY KEY (jobid))'"

- name: Create encoding_job_notifications  table
  community.cassandra.cassandra_table:
    name: encoding_job_notifications
    state: present
    keyspace: killrvideo
    columns:
      - jobid: text
      - status_date: timestamp
      - etag: text
      - newstate: text
      - oldstate: text
    primary_key:
      - jobid
      - status_date
      - etag
    clustering:
      - status_date: "DESC"
      - etag: "ASC"
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: encoding_job_notifications

- assert:
    that:
      - "encoding_job_notifications.changed == True"
      - "encoding_job_notifications.cql == 'CREATE TABLE killrvideo.encoding_job_notifications ( jobid text, status_date timestamp, etag text, newstate text, oldstate text, PRIMARY KEY (jobid, status_date, etag)) WITH CLUSTERING ORDER BY (status_date DESC, etag ASC)'"

- name: Get output of DESC KEYSPACE killrvideo
  ansible.builtin.shell: "cqlsh -u  {{ cassandra_admin_user }} -p {{ cassandra_admin_pwd }} --execute 'DESC KEYSPACE killrvideo'"
  register: killrvideo

- assert:
    that:
      - "'CREATE TABLE killrvideo.user_credentials' in killrvideo.stdout"
      - "'CREATE TABLE killrvideo.users' in killrvideo.stdout"
      - "'CREATE TABLE killrvideo.videos' in killrvideo.stdout"
      - "'CREATE TABLE killrvideo.user_videos' in killrvideo.stdout"
      - "'CREATE TABLE killrvideo.latest_videos' in killrvideo.stdout"
      - "'CREATE TABLE killrvideo.video_rating' in killrvideo.stdout"
      - "'CREATE TABLE killrvideo.video_ratings_by_user' in killrvideo.stdout"
      - "'CREATE TABLE killrvideo.videos_by_tag' in killrvideo.stdout"
      - "'CREATE TABLE killrvideo.tags_by_letter' in killrvideo.stdout"
      - "'CREATE TABLE killrvideo.comments_by_video' in killrvideo.stdout"
      - "'CREATE TABLE killrvideo.comments_by_user' in killrvideo.stdout"
      - "'CREATE TABLE killrvideo.video_event' in killrvideo.stdout"
      - "'CREATE TABLE killrvideo.uploaded_videos' in killrvideo.stdout"
      - "'CREATE TABLE killrvideo.uploaded_videos_by_jobid' in killrvideo.stdout"
      - "'CREATE TABLE killrvideo.encoding_job_notifications' in killrvideo.stdout"
      - "'PRIMARY KEY ((videoid, userid), event_timestamp, event)' in killrvideo.stdout"

- name: Create table with lots of table_options set
  community.cassandra.cassandra_table:
    name: complex_table_options
    state: present
    keyspace: myapp
    columns:
      - column1: uuid
      - column2: int
      - column3: int
      - column4: date
      - column5: varchar
      - column6: timestamp
      - column7: "set<text>"
      - column8: "map<text, float>"
      - column9: decimal
      - column10: double
      - column11: float
      - column12: blob
      - column13: varint
      - column14: int
      - column15: inet
      - column16: bigint
    primary_key:
      - column1
      - column2
      - column3
      - column4
    partition_key:
      - column1
      - column2
    clustering:
      - column3: "ASC"
      - column4: "DESC"
    table_options:
      bloom_filter_fp_chance: '0.02'
      caching: "{ 'keys': 'ALL', 'rows_per_partition': 'ALL' }"
      comment: "'This is a comment'"
      default_time_to_live: 630720000
      gc_grace_seconds: 864001
      compaction: "{'class': 'SizeTieredCompactionStrategy', 'enabled': 'true' }"
      compression: "{'sstable_compression': 'LZ4Compressor', 'chunk_length_kb': 64}"
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: complex_table_options

- assert:
    that:
      - "complex_table_options.changed == True"
      - "'CREATE TABLE myapp.complex_table_options' in complex_table_options.cql"
      - "'SizeTieredCompactionStrategy' in complex_table_options.cql"
      - "'LZ4Compressor' in complex_table_options.cql"
      - "'gc_grace_seconds = 864001' in complex_table_options.cql"
      - "'bloom_filter_fp_chance = 0.02' in complex_table_options.cql"

- name: Get output of DESC KEYSPACE myapp
  ansible.builtin.shell: "cqlsh -u  {{ cassandra_admin_user }} -p {{ cassandra_admin_pwd }} --execute 'DESC KEYSPACE myapp'"
  register: killrvideo

- assert:
    that:
      - "'CREATE TABLE myapp.complex_table_options' in killrvideo.stdout"
      - "'SizeTieredCompactionStrategy' in killrvideo.stdout"
      - "'LZ4Compressor' in killrvideo.stdout"
      - "'gc_grace_seconds = 864001' in killrvideo.stdout"
      - "'bloom_filter_fp_chance = 0.02' in killrvideo.stdout"
