# test code for the cassandra_concurrency module
# (c) 2021,  Rhys Campbell <rhyscampbell@bluewin.ch>

# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

# ===========================================================
- name: Module only supported from Cassandra 4
  meta: 'end_play'
  when: cassandra_version[0] | int < 4

- name: Set ReadStage - default should not change
  community.cassandra.cassandra_concurrency:
    concurrency_stage: ReadStage
    value: 32
    debug: yes
  register: aes

- assert:
    that:
      - "aes.changed == False"
      - "aes.msg == 'Configured value is already 32'"

- name: Set ReadStage - check mode
  community.cassandra.cassandra_concurrency:
    concurrency_stage: ReadStage
    value: 34
    debug: yes
  check_mode: yes
  register: aes
  
- assert:
    that:
      - "aes.changed"
      - "aes.msg == 'default/ReadStage updated to 34'"

- name: Set ReadStage - should change
  community.cassandra.cassandra_concurrency:
    concurrency_stage: ReadStage
    value: 34
    debug: yes
  register: aes
  
- assert:
    that:
      - "aes.changed"
      - "aes.msg == 'default/ReadStage updated to 34'"

- name: Set ReadStage - should not change
  community.cassandra.cassandra_concurrency:
    concurrency_stage: ReadStage
    value: 34
    debug: yes
  register: aes
  
- assert:
    that:
      - "aes.changed == False"
      - "aes.msg == 'Configured value is already 34'"

# Test compactors
- name: Test concurrency_type compactors - default should not change
  community.cassandra.cassandra_concurrency:
    concurrency_type: "compactors"
    value: 2
  register: c

- assert:
    that:
      - "c.changed == False"
      - "c.msg == 'Configured value is already 2'"

- name: Test concurrency_type compactors - check mode should change
  community.cassandra.cassandra_concurrency:
    concurrency_type: "compactors"
    value: 4
  check_mode: yes
  register: c

- assert:
    that:
      - "c.changed"
      - "c.msg == 'compactors updated to 4'"

- name: Test concurrency_type compactors - should change
  community.cassandra.cassandra_concurrency:
    concurrency_type: "compactors"
    value: 4
  register: c

- assert:
    that:
      - "c.changed"
      - "c.msg == 'compactors updated to 4'"

- name: Test concurrency_type compactors - should not change
  community.cassandra.cassandra_concurrency:
    concurrency_type: "compactors"
    value: 4
  register: c

- assert:
    that:
      - "c.changed == False"
      - "c.msg == 'Configured value is already 4'"

# Test viewbuilders
- name: Test concurrency_type viewbuilders - default should not change
  community.cassandra.cassandra_concurrency:
    concurrency_type: "viewbuilders"
    value: 1
  register: c

- assert:
    that:
      - "c.changed == False"
      - "c.msg == 'Configured value is already 1'"

- name: Test concurrency_type viewbuilders - check mode should change
  community.cassandra.cassandra_concurrency:
    concurrency_type: "viewbuilders"
    value: 2
  check_mode: yes
  register: c

- assert:
    that:
      - "c.changed"
      - "c.msg == 'viewbuilders updated to 2'"

- name: Test concurrency_type viewbuilders - should change
  community.cassandra.cassandra_concurrency:
    concurrency_type: "viewbuilders"
    value: 2
  register: c

- assert:
    that:
      - "c.changed"
      - "c.msg == 'viewbuilders updated to 2'"

- name: Test concurrency_type viewbuilders - should not change
  community.cassandra.cassandra_concurrency:
    concurrency_type: "viewbuilders"
    value: 2
  register: c

- assert:
    that:
      - "c.changed == False"
      - "c.msg == 'Configured value is already 2'"

- include_tasks: ../../setup_cassandra/tasks/cassandra_auth.yml
  when: cassandra_auth_tests == True

# Repeat tests of above with auth
- name: Set ReadStage - default should not change
  community.cassandra.cassandra_concurrency:
    username: "{{ cassandra_admin_user }}"
    password: "{{ cassandra_admin_pwd }}"
    concurrency_stage: ReadStage
    value: 32
    debug: yes
  register: aes

- assert:
    that:
      - "aes.changed == False"
      - "aes.msg == 'Configured value is already 32'"

- name: Set ReadStage - check mode
  community.cassandra.cassandra_concurrency:
    username: "{{ cassandra_admin_user }}"
    password: "{{ cassandra_admin_pwd }}"
    concurrency_stage: ReadStage
    value: 34
    debug: yes
  check_mode: yes
  register: aes
  
- assert:
    that:
      - "aes.changed"
      - "aes.msg == 'default/ReadStage updated to 34'"

- name: Set ReadStage - should change
  community.cassandra.cassandra_concurrency:
    username: "{{ cassandra_admin_user }}"
    password: "{{ cassandra_admin_pwd }}"
    concurrency_stage: ReadStage
    value: 34
    debug: yes
  register: aes
  
- assert:
    that:
      - "aes.changed"
      - "aes.msg == 'default/ReadStage updated to 34'"

- name: Set ReadStage - should not change
  community.cassandra.cassandra_concurrency:
    username: "{{ cassandra_admin_user }}"
    password: "{{ cassandra_admin_pwd }}"
    concurrency_stage: ReadStage
    value: 34
    debug: yes
  register: aes
  
- assert:
    that:
      - "aes.changed == False"
      - "aes.msg == 'Configured value is already 34'"

# Test compactors
- name: Test concurrency_type compactors - default should not change
  community.cassandra.cassandra_concurrency:
    username: "{{ cassandra_admin_user }}"
    password: "{{ cassandra_admin_pwd }}"
    concurrency_type: "compactors"
    value: 2
  register: c

- assert:
    that:
      - "c.changed == False"
      - "c.msg == 'Configured value is already 2'"

- name: Test concurrency_type compactors - check mode should change
  community.cassandra.cassandra_concurrency:
    username: "{{ cassandra_admin_user }}"
    password: "{{ cassandra_admin_pwd }}"
    concurrency_type: "compactors"
    value: 4
  check_mode: yes
  register: c

- assert:
    that:
      - "c.changed"
      - "c.msg == 'compactors updated to 4'"

- name: Test concurrency_type compactors - should change
  community.cassandra.cassandra_concurrency:
    username: "{{ cassandra_admin_user }}"
    password: "{{ cassandra_admin_pwd }}"
    concurrency_type: "compactors"
    value: 4
  register: c

- assert:
    that:
      - "c.changed"
      - "c.msg == 'compactors updated to 4'"

- name: Test concurrency_type compactors - should not change
  community.cassandra.cassandra_concurrency:
    username: "{{ cassandra_admin_user }}"
    password: "{{ cassandra_admin_pwd }}"
    concurrency_type: "compactors"
    value: 4
  register: c

- assert:
    that:
      - "c.changed == False"
      - "c.msg == 'Configured value is already 4'"

# Test viewbuilders
- name: Test concurrency_type viewbuilders - default should not change
  community.cassandra.cassandra_concurrency:
    username: "{{ cassandra_admin_user }}"
    password: "{{ cassandra_admin_pwd }}"
    concurrency_type: "viewbuilders"
    value: 1
  register: c

- assert:
    that:
      - "c.changed == False"
      - "c.msg == 'Configured value is already 1'"

- name: Test concurrency_type viewbuilders - check mode should change
  community.cassandra.cassandra_concurrency:
    username: "{{ cassandra_admin_user }}"
    password: "{{ cassandra_admin_pwd }}"
    concurrency_type: "viewbuilders"
    value: 2
  check_mode: yes
  register: c

- assert:
    that:
      - "c.changed"
      - "c.msg == 'viewbuilders updated to 2'"

- name: Test concurrency_type viewbuilders - should change
  community.cassandra.cassandra_concurrency:
    username: "{{ cassandra_admin_user }}"
    password: "{{ cassandra_admin_pwd }}"
    concurrency_type: "viewbuilders"
    value: 2
  register: c

- assert:
    that:
      - "c.changed"
      - "c.msg == 'viewbuilders updated to 2'"

- name: Test concurrency_type viewbuilders - should not change
  community.cassandra.cassandra_concurrency:
    username: "{{ cassandra_admin_user }}"
    password: "{{ cassandra_admin_pwd }}"
    concurrency_type: "viewbuilders"
    value: 2
  register: c

- assert:
    that:
      - "c.changed == False"
      - "c.msg == 'Configured value is already 2'"

# Standard tests
- name: Test concurrency_type viewbuilders - with pw file
  community.cassandra.cassandra_concurrency:
    concurrency_type: "viewbuilders"
    value: 2
    username: "{{ cassandra_admin_user }}"
    password_file: /etc/cassandra/jmxremote.password
    debug: yes
  register: c
  when: cassandra_auth_tests == True

- name: Test login failure handling
  community.cassandra.cassandra_concurrency:
    concurrency_type: "viewbuilders"
    value: 2
    username: "{{ cassandra_admin_user }}"
    password: XXXXXXXXXXXXXXXXXXXXX
    debug: yes
  register: c
  ignore_errors: true
  when: cassandra_auth_tests == True

- name: Assert failed login
  assert:
    that:
      - c.failed == True
      - "'Invalid username or password' in c.stderr"
  when: cassandra_auth_tests == True

- name: Test incorrect nodetool_path handling
  community.cassandra.cassandra_concurrency:
    concurrency_type: "viewbuilders"
    value: 2
    nodetool_path: /tmp
    debug: yes
  register: nodetool_path_error
  ignore_errors: true
  when: cassandra_auth_tests == True

- name: Assert no such file
  assert:
    that:
      - "'No such file or directory' in nodetool_path_error.msg"