# test code for the cassandra_role module
# (c) 2019,  Rhys Campbell <rhys.james.campbell@googlemail.com>

# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

# ===========================================================
- name: Include vars for os family
  include_vars:
    file: "{{ ansible_os_family }}.yml"

# This should go into a cassandra_driver dependency
- name: Ensure epel is available
  yum:
    name: epel-release
  when: ansible_os_family == "RedHat"

- name: Install cassandra-driver
  pip:
    name: cassandra-driver
  environment:
    CASS_DRIVER_NO_CYTHON: 1

- name: Create a role - Auth is not enabled so will fail
  community.cassandra.cassandra_role:
    name: app_user
    password: 'secretZHB78'
    state: present
    login: yes
  register: auth_not_enabled
  ignore_errors: yes

- name: Check for expected error message
  assert:
    that:
      - 'auth_not_enabled.changed == False'
      - '"CassandraRoleManager doesn''t support PASSWORD" in auth_not_enabled.msg'

# We need to have auth enable for this module to do anything useful
- include_tasks: ../../setup_cassandra/tasks/cassandra_auth.yml
  when: cassandra_auth_tests == True

- name: Ensure handling of no credentials
  community.cassandra.cassandra_role:
    name: app_user
    password: XXXXXXXXX
    state: present
    login: yes
  register: no_credentials
  ignore_errors: yes

- name: Check for expected error message
  assert:
    that:
      - 'no_credentials.changed == False'
      - "'Remote end requires authentication' in no_credentials.msg"

- name: Ensure handling of dodgy credentials
  community.cassandra.cassandra_role:
    name: app_user
    password: XXXXXXXXX
    state: present
    login: yes
    login_user: XXXXXXXXX
    login_password: XXXXXXXX
  register: dodgy_credentials
  ignore_errors: yes

- name: Check for expected error message
  assert:
    that:
      - 'dodgy_credentials.changed == False'
      - "'or password are incorrect' in dodgy_credentials.msg"

- name: Create a role
  community.cassandra.cassandra_role:
    name: app_user
    password: 'secretZHB78'
    state: present
    login: yes
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: create_role

- assert:
    that:
      - 'create_role.changed == True'

- name: Create a role (check mode)
  community.cassandra.cassandra_role:
    name: app_user
    password: 'secretZHB78'
    state: present
    login: yes
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  check_mode: yes

- name: Get output of list roles
  ansible.builtin.shell: cqlsh --username "{{ cassandra_admin_user }}" --password "{{ cassandra_admin_pwd }}" --execute "LIST ROLES"
  register: myrole

- name: Assert app_user exists in output
  assert:
    that:
      - "'app_user' in myrole.stdout"

- name: Run same create role again
  community.cassandra.cassandra_role:
    name: app_user
    password: 'secretZHB78'
    state: present
    login: yes
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: myrole
  ignore_errors: yes

- name: Remove a role (check mode)
  community.cassandra.cassandra_role:
    name: app_user
    state: absent
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  check_mode: yes

- name: Remove a role
  community.cassandra.cassandra_role:
    name: app_user
    state: absent
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: absent

- name: Asser role changed
  assert:
    that:
      - "absent.changed == True"

- name: Get output of list roles
  ansible.builtin.shell: cqlsh --username "{{ cassandra_admin_user }}" --password "{{ cassandra_admin_pwd }}" --execute "LIST ROLES"
  register: myrole

- name: Assert app_user does not exist
  assert:
    that:
      - "'app_user' not in myrole.stdout"

- name: Run same create role again with check mode
  community.cassandra.cassandra_role:
    name: app_user
    password: 'secretZHB78'
    state: present
    login: yes
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  check_mode: yes
  register: myrole

- name: Ensure expected error is in output
  assert:
    that:
      - "myrole.changed == True"
      - "myrole.role == 'app_user'"

- name: Get output of list roles - app_user should not exist
  ansible.builtin.shell: cqlsh --username "{{ cassandra_admin_user }}" --password "{{ cassandra_admin_pwd }}" --execute "LIST ROLES"
  register: myrole

- name: Assert app_user does not exist
  assert:
    that:
      - "'app_user' not in myrole.stdout"

- name: Test invalid permission handling
  community.cassandra.cassandra_role:
    name: app_user
    password: 'secretZHB78'
    state: present
    keyspace_permissions:
      mykeyspace:
        - "INVALID PERMISSION"
    login: yes
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: invalid_perms
  ignore_errors: yes

- name: Check for expected error msg
  assert:
    that:
      - "'Invalid permission provided in the keyspace_permission parameter.' == invalid_perms.msg"

- name: Create keyspaces for tests
  cassandra_keyspace:
    name: "{{ item }}"
    state: present
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  with_items:
    - mykeyspace1
    - mykeyspace2
    - mykeyspace3

- name: Create keyspaces for 4.0
  cassandra_keyspace:
    name: "{{ item }}"
    state: present
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  with_items:
    - mykeyspace4
    - mykeyspace5
    - mykeyspace6

- name: Get all keyspaces
  ansible.builtin.shell: cqlsh --username "{{ cassandra_admin_user }}" --password "{{ cassandra_admin_pwd }}" --execute "DESC KEYSPACES"
  register: keyspaces

- name: Ensure that keyspaces exist
  assert:
    that:
      - "'mykeyspace1' in keyspaces.stdout"
      - "'mykeyspace2' in keyspaces.stdout"
      - "'mykeyspace3' in keyspaces.stdout"
      - "'mykeyspace4' in keyspaces.stdout"
      - "'mykeyspace5' in keyspaces.stdout"
      - "'mykeyspace6' in keyspaces.stdout"

- name: Create role with a range of keyspace permissions
  community.cassandra.cassandra_role:
    name: app_user_multi_keyspace
    password: 'secretZHB78'
    state: present
    keyspace_permissions:
      mykeyspace1:
        - "ALL PERMISSIONS"
      mykeyspace2:
        - "SELECT"
        - "MODIFY"
      mykeyspace3:
        - ALTER
        - DROP
      mykeyspace4:
        - SELECT
      mykeyspace5:
        - SELECT
        - MODIFY
        - ALTER
      mykeyspace6:
        - AUTHORIZE
        - SELECT
    login: yes
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: app_user_multi_keyspace

- assert:
    that:
      - "app_user_multi_keyspace.changed == True"
      - "app_user_multi_keyspace.cql == \"CREATE ROLE 'app_user_multi_keyspace' WITH SUPERUSER = False AND LOGIN = True AND PASSWORD = '********' \""
      - "app_user_multi_keyspace.role == 'app_user_multi_keyspace'"

- name: Get output of list roles
  ansible.builtin.shell: cqlsh --username "{{ cassandra_admin_user }}" --password "{{ cassandra_admin_pwd }}" --execute "LIST ROLES"
  register: myrole

- name: Assert app_user_multi_keyspace exists
  assert:
    that:
      - "'app_user_multi_keyspace' in myrole.stdout"

- name: Get output of list permissions
  ansible.builtin.shell: cqlsh --username "{{ cassandra_admin_user }}" --password "{{ cassandra_admin_pwd }}" --execute "LIST ALL PERMISSIONS OF cassandra"
  register: myperms

# - name: Validate assigned keyspace permissions TODO

- name: Create role using all_keyspaces special dict key
  community.cassandra.cassandra_role:
    name: app_user_all_keyspaces
    password: 'secretZHB78'
    state: present
    keyspace_permissions:
      all_keyspaces:
        - "ALL PERMISSIONS"
    login: yes
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: app_user_all_keyspaces

#-name: Get output of list permission for app_user_all_keyspaces user TODO
#-name: Assert that app_user_all_keyspaces user has expected permissions

- name: Create a read-only user for all keyspaces
  community.cassandra.cassandra_role:
    name: read_only
    password: "secret"
    state: present
    keyspace_permissions:
      all_keyspaces:
        - SELECT
    login: yes
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: read_only_user

- assert:
    that: "read_only_user.changed == True"

- name: Get output of list permissions for read_only user
  ansible.builtin.shell: cqlsh --username "{{ cassandra_admin_user }}" --password "{{ cassandra_admin_pwd }}" --execute "LIST ALL PERMISSIONS OF read_only"
  register: read_only_user_perms

- name: Assert that all keyspaces select permissions exists
  assert:
    that:
      - "'<all keyspaces> |     SELECT' in read_only_user_perms.stdout"
      - "'(1 rows)' in read_only_user_perms.stdout"

- name: Run read_only user for but remove all_keyspaces permission and add another
  community.cassandra.cassandra_role:
    name: read_only
    password: "secret"
    state: present
    keyspace_permissions:
      mykeyspace1:
        - SELECT
    login: yes
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: read_only_user

- assert:
    that: "read_only_user.changed == True"

- name: Get output of list permissions for read_only user
  ansible.builtin.shell: cqlsh --username "{{ cassandra_admin_user }}" --password "{{ cassandra_admin_pwd }}" --execute "LIST ALL PERMISSIONS OF read_only"
  register: read_only_user_perms

- name: Assert that all keyspaces select permissions does not exist
  assert:
    that:
      - "'<all keyspaces> |     SELECT' not in read_only_user_perms.stdout"
      - "'<keyspace mykeyspace1> |     SELECT' in read_only_user_perms.stdout"
      - "'(1 rows)' in read_only_user_perms.stdout"

- name: Test revoke of read_only user
  community.cassandra.cassandra_role:
    name: read_only
    password: "secret"
    state: present
    login: yes
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: read_only_user

- name: Get output of list permissions for read_only user
  ansible.builtin.shell: cqlsh --username "{{ cassandra_admin_user }}" --password "{{ cassandra_admin_pwd }}" --execute "LIST ALL PERMISSIONS OF read_only"
  register: read_only_user_perms

- name: read_only role should now have no permissions
  assert:
    that:
      - "'(0 rows)' in read_only_user_perms.stdout"

- name: Drop the read_only role
  community.cassandra.cassandra_role:
    name: read_only
    state: absent
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"

- name: Create a role to assign to users
  community.cassandra.cassandra_role:
    name: rw_role
    state: present
    login: false
    keyspace_permissions:
      all_keyspaces:
        - SELECT
        - MODIFY
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"

- name: Get output of list permissions for rw_role
  ansible.builtin.shell: cqlsh --username "{{ cassandra_admin_user }}" --password "{{ cassandra_admin_pwd }}" --execute "LIST ALL PERMISSIONS OF rw_role"
  register: rw_role_perms

- name: rw_role role permissions test
  assert:
    that:
      - "'(2 rows)' in rw_role_perms.stdout"
      - "'<all keyspaces> |     SELECT' in rw_role_perms.stdout"
      - "'<all keyspaces> |     MODIFY' in rw_role_perms.stdout"

- name: Create a user and assign rw_role
  community.cassandra.cassandra_role:
    name: myapp
    password: "secret"
    state: present
    keyspace_permissions:
      mykeyspace1:
        - ALTER
    login: yes
    roles:
      - rw_role
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: myapp

- assert:
    that:
      - "myapp.changed == True"
      - "\"CREATE ROLE 'myapp' WITH SUPERUSER = False AND LOGIN = True AND PASSWORD\" in myapp.cql"
      # TODO Check permissions grant and revoke statement

- name: Get output of list permissions for rw_role
  ansible.builtin.shell: cqlsh --username "{{ cassandra_admin_user }}" --password "{{ cassandra_admin_pwd }}" --execute "LIST ALL PERMISSIONS OF myapp"
  register: rw_role_user_perms

- name: rw_role role permissions test
  assert:
    that:
      - "'(3 rows)' in rw_role_user_perms.stdout"
      - "'<all keyspaces> |     SELECT' in rw_role_user_perms.stdout"
      - "'<all keyspaces> |     MODIFY' in rw_role_user_perms.stdout"
      - "'<keyspace mykeyspace1> |      ALTER' in rw_role_user_perms.stdout"

- name: Run same thing with check mode
  community.cassandra.cassandra_role:
    name: myapp
    password: "secret"
    state: present
    keyspace_permissions:
      mykeyspace1:
        - ALTER
    login: yes
    roles:
      - rw_role
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: myapp
  check_mode: yes # Temp to see output

- assert:
    that:
      - "myapp.changed == False"
      - "'permissions' not in myapp.keys()"
      - "'roles' not in myapp.keys()"

- name: Get output of list permissions for rw_role
  ansible.builtin.shell: cqlsh --username "{{ cassandra_admin_user }}" --password "{{ cassandra_admin_pwd }}" --execute "LIST ALL PERMISSIONS OF myapp"
  register: rw_role_user_perms

- name: rw_role role permissions test
  assert:
    that:
      - "'(3 rows)' in rw_role_user_perms.stdout"
      - "'<all keyspaces> |     SELECT' in rw_role_user_perms.stdout"
      - "'<all keyspaces> |     MODIFY' in rw_role_user_perms.stdout"
      - "'<keyspace mykeyspace1> |      ALTER' in rw_role_user_perms.stdout"

- name: Add select permission
  community.cassandra.cassandra_role:
    name: myapp
    password: "secret"
    state: present
    keyspace_permissions:
      mykeyspace1:
        - ALTER
        - SELECT
    login: yes
    roles:
      - rw_role
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: myapp

- assert:
    that:
      - "myapp.changed == True"
      - "myapp.permissions['grant'] == [\"GRANT SELECT ON KEYSPACE mykeyspace1 TO 'myapp'\"]"
      - "'roles' not in myapp.keys()"

- name: Get output of list permissions for rw_role
  ansible.builtin.shell: cqlsh --username "{{ cassandra_admin_user }}" --password "{{ cassandra_admin_pwd }}" --execute "LIST ALL PERMISSIONS OF myapp"
  register: rw_role_user_perms

- name: rw_role role permissions test BLAH
  assert:
    that:
      - "'(4 rows)' in rw_role_user_perms.stdout"
      - "'<all keyspaces> |     SELECT' in rw_role_user_perms.stdout"
      - "'<all keyspaces> |     MODIFY' in rw_role_user_perms.stdout"
      - "'<keyspace mykeyspace1> |      ALTER' in rw_role_user_perms.stdout"
      - "'<keyspace mykeyspace1> |     SELECT' in rw_role_user_perms.stdout"

- name: Revoke alter permission
  community.cassandra.cassandra_role:
    name: myapp
    password: "secret"
    state: present
    keyspace_permissions:
      mykeyspace1:
        - SELECT
    login: yes
    roles:
      - rw_role
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: myapp

- assert:
    that:
      - "myapp.changed == True"
      - "myapp.permissions['revoke'] == [\"REVOKE ALTER ON KEYSPACE mykeyspace1 FROM 'myapp'\"]"
      - "'roles' not in myapp.keys()"

- name: Get output of list permissions for rw_role
  ansible.builtin.shell: cqlsh --username "{{ cassandra_admin_user }}" --password "{{ cassandra_admin_pwd }}" --execute "LIST ALL PERMISSIONS OF myapp"
  register: rw_role_user_perms

- name: rw_role role permissions test
  assert:
    that:
      - "'(3 rows)' in rw_role_user_perms.stdout"
      - "'<all keyspaces> |     SELECT' in rw_role_user_perms.stdout"
      - "'<all keyspaces> |     MODIFY' in rw_role_user_perms.stdout"
      - "'<keyspace mykeyspace1> |     SELECT' in rw_role_user_perms.stdout"

- name: Create a user with complex permissions
  community.cassandra.cassandra_role:
    name: complex
    password: "secret"
    state: present
    keyspace_permissions:
      mykeyspace1:
        - SELECT
      mykeyspace2:
        - SELECT
        - MODIFY
      mykeyspace3:
        - SELECT
        - MODIFY
        - ALTER
      mykeyspace4:
        - ALL PERMISSIONS
      mykeyspace5:
        - SELECT
      mykeyspace6:
        - SELECT
    login: yes
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: complex

- assert:
    that:
      - "complex.changed == True"
      - "complex.permissions['revoke'] | length == 0"
      - "complex.permissions['grant'] | length == 9"
      - "'roles' not in myapp.keys()"


- name: Get output of list permissions for rw_role
  ansible.builtin.shell: cqlsh --username "{{ cassandra_admin_user }}" --password "{{ cassandra_admin_pwd }}" --execute "LIST ALL PERMISSIONS OF complex"
  register: complex

- name: complex role permissions test
  assert:
    that:
      - "'(14 rows)' in complex.stdout"
      - "'<keyspace mykeyspace1> |     SELECT' in complex.stdout"
      - "'<keyspace mykeyspace2> |     SELECT' in complex.stdout"
      - "'<keyspace mykeyspace2> |     MODIFY' in complex.stdout"
      - "'<keyspace mykeyspace3> |     SELECT' in complex.stdout"
      - "'<keyspace mykeyspace3> |     MODIFY' in complex.stdout"
      - "'<keyspace mykeyspace3> |      ALTER' in complex.stdout"
      - "'<keyspace mykeyspace4> |     CREATE' in complex.stdout"
      - "'<keyspace mykeyspace4> |     SELECT' in complex.stdout"
      - "'<keyspace mykeyspace4> |     MODIFY' in complex.stdout"
      - "'<keyspace mykeyspace4> |      ALTER' in complex.stdout"
      - "'<keyspace mykeyspace4> |       DROP' in complex.stdout"
      - "'<keyspace mykeyspace4> |  AUTHORIZE' in complex.stdout"
      - "'<keyspace mykeyspace5> |     SELECT' in complex.stdout"
      - "'<keyspace mykeyspace6> |     SELECT' in complex.stdout"

# Drop permissions from complex user
- name: Drop permissions and add role to complex user
  community.cassandra.cassandra_role:
    name: complex
    password: "secret"
    state: present
    keyspace_permissions:
      mykeyspace1:
        - SELECT
      mykeyspace2:
        - SELECT
      mykeyspace3:
        - SELECT
        - MODIFY
      mykeyspace5:
        - SELECT
      mykeyspace6:
        - SELECT
    login: yes
    roles:
      - rw_role
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: complex

- assert:
    that:
      - "complex.changed == True"
      - "complex.permissions['revoke'] | length == 8"
      - "complex.permissions['grant'] | length == 0"
      - "'roles' in complex.keys()"

- name: Test complex user
  ansible.builtin.shell: cqlsh --username complex --password secret --execute "DESC KEYSPACES"

- name: Get output of list permissions for rw_role
  ansible.builtin.shell: cqlsh --username "{{ cassandra_admin_user }}" --password "{{ cassandra_admin_pwd }}" --execute "LIST ALL PERMISSIONS OF complex"
  register: complex

# Dropped permissions checked with not in
- name: complex role permissions test
  assert:
    that:
      - "'(8 rows)' in complex.stdout"
      - "'<keyspace mykeyspace1> |     SELECT' in complex.stdout"
      - "'<keyspace mykeyspace2> |     SELECT' in complex.stdout"
      - "'<keyspace mykeyspace2> |     MODIFY' not in complex.stdout"
      - "'<keyspace mykeyspace3> |     SELECT' in complex.stdout"
      - "'<keyspace mykeyspace3> |     MODIFY' in complex.stdout"
      - "'<keyspace mykeyspace3> |      ALTER' not in complex.stdout"
      - "'<keyspace mykeyspace4> |     CREATE' not in complex.stdout"
      - "'<keyspace mykeyspace4> |     SELECT' not in complex.stdout"
      - "'<keyspace mykeyspace4> |     MODIFY' not in complex.stdout"
      - "'<keyspace mykeyspace4> |      ALTER' not in complex.stdout"
      - "'<keyspace mykeyspace4> |       DROP' not in complex.stdout"
      - "'<keyspace mykeyspace4> |  AUTHORIZE' not in complex.stdout"
      - "'<keyspace mykeyspace5> |     SELECT' in complex.stdout"
      - "'<keyspace mykeyspace6> |     SELECT' in complex.stdout"
      - "'rw_role |        <all keyspaces> |     SELECT' in complex.stdout"
      - "'rw_role |        <all keyspaces> |     MODIFY' in complex.stdout"

- name: Create a role with dash in name
  community.cassandra.cassandra_role:
    name: app-user
    password: 'secretZHB78'
    state: present
    login: yes
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: create_role

- assert:
    that:
      - 'create_role.changed == True'

- name: Get output of list roles
  ansible.builtin.shell: cqlsh --username "{{ cassandra_admin_user }}" --password "{{ cassandra_admin_pwd }}" --execute "LIST ROLES"
  register: myrole

- name: Assert app-user exists in output
  assert:
    that:
      - "'app-user' in myrole.stdout"

- name: Remove a role with dash in name
  community.cassandra.cassandra_role:
    name: app-user
    state: absent
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: absent

- name: Assert role changed
  assert:
    that:
      - "absent.changed == True"

- name: Get output of list roles
  ansible.builtin.shell: cqlsh --username "{{ cassandra_admin_user }}" --password "{{ cassandra_admin_pwd }}" --execute "LIST ROLES"
  register: myrole

- name: Assert app-user does not exist
  assert:
    that:
      - "'app-user' not in myrole.stdout"

- name: Create a user with permissions and dash in name
  community.cassandra.cassandra_role:
    name: user-with-perms
    password: "secret"
    state: present
    keyspace_permissions:
      all_keyspaces:
        - SELECT
    login: yes
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: user_with_perms

- assert:
    that: "user_with_perms.changed == True"

- name: Get output of list permissions for user-with-perms user
  ansible.builtin.shell: cqlsh --username "{{ cassandra_admin_user }}" --password "{{ cassandra_admin_pwd }}" --execute "LIST ALL PERMISSIONS OF 'user-with-perms'"
  register: user_with_perms_perms

- name: Assert that all keyspaces select permissions exists
  assert:
    that:
      - "'<all keyspaces> |     SELECT' in user_with_perms_perms.stdout"
      - "'(1 rows)' in user_with_perms_perms.stdout"

- name: Run user-with-perms but remove all_keyspaces permission and add another
  community.cassandra.cassandra_role:
    name: user-with-perms
    password: "secret"
    state: present
    keyspace_permissions:
      mykeyspace1:
        - SELECT
    login: yes
    login_user: "{{ cassandra_admin_user }}"
    login_password: "{{ cassandra_admin_pwd }}"
  register: user_with_perms

- assert:
    that: "user_with_perms.changed == True"

- name: Get output of list permissions for user-with-perms user
  ansible.builtin.shell: cqlsh --username "{{ cassandra_admin_user }}" --password "{{ cassandra_admin_pwd }}" --execute "LIST ALL PERMISSIONS OF 'user-with-perms'"
  register: user_with_perms_perms

- name: Assert that all keyspaces select permissions does not exist
  assert:
    that:
      - "'<all keyspaces> |     SELECT' not in user_with_perms_perms.stdout"
      - "'<keyspace mykeyspace1> |     SELECT' in user_with_perms_perms.stdout"
      - "'(1 rows)' in user_with_perms_perms.stdout"

- name: Import tasks for issue 204
  import_tasks: 204.yml
